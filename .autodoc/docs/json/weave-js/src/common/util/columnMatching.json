{
  "fileName": "columnMatching.tsx",
  "filePath": "weave-js/src/common/util/columnMatching.tsx",
  "url": "https://github.com/wandb/weave/weave-js/src/common/util/columnMatching.tsx",
  "summary": "The `weave` project includes a module that provides a way to match and highlight text based on different matching modes. The module exports three matchers: `FuzzyMatcher`, `ExactMatcher`, and `RegexMatcher`. Each matcher has two methods: `match` and `highlight`. The `match` method takes an array of objects, a string to match against, and a function that returns a string from each object. It returns an array of objects that match the given string, sorted in natural order. The `highlight` method takes a string, a query string to match against, and a style object to apply to the matched text. It returns a React fragment with the matched text wrapped in a span with the given style.\n\nThe `FuzzyMatcher` uses the `fuzzyMatchWithMapping` and `fuzzyMatchHighlight` functions from the `fuzzyMatch` module to perform fuzzy matching and highlighting. The `ExactMatcher` uses the `indexOf` method to find exact matches and sorts the results using `localeCompare`. The `RegexMatcher` uses a regular expression to match against the string and sorts the results using `localeCompare`.\n\nThe module also exports two functions: `dynamicMatchWithMapping` and `dynamicMatchHighlight`. These functions take a matching mode (`fuzzy`, `exact`, or `regex`), an array of objects, a string to match against, and a function that returns a string from each object. The `dynamicMatchWithMapping` function returns an array of objects that match the given string using the specified matching mode. The `dynamicMatchHighlight` function returns a React fragment with the matched text highlighted using the specified matching mode and style.\n\nHere's an example of how to use the `dynamicMatchWithMapping` and `dynamicMatchHighlight` functions:\n\n```jsx\nimport { dynamicMatchWithMapping, dynamicMatchHighlight } from 'weave/matchers';\n\nconst items = [\n  { name: 'apple', category: 'fruit' },\n  { name: 'banana', category: 'fruit' },\n  { name: 'carrot', category: 'vegetable' },\n  { name: 'orange', category: 'fruit' },\n];\n\nconst mode = 'fuzzy';\nconst query = 'app';\nconst strFunc = (item) => item.name;\n\nconst matchedItems = dynamicMatchWithMapping(mode, items, query, strFunc);\n\nconst highlightedText = dynamicMatchHighlight(mode, 'apple', query, { fontWeight: 'bold' });\n\n// matchedItems: [{ name: 'apple', category: 'fruit' }]\n// highlightedText: <span><span>ap</span>ple</span>\n```",
  "questions": "1. What is the purpose of the `Matcher` interface?\n- The `Matcher` interface defines the shape of objects that have a `match` method and a `highlight` method.\n\n2. What are the differences between the `FuzzyMatcher`, `ExactMatcher`, and `RegexMatcher` objects?\n- `FuzzyMatcher` uses a fuzzy matching algorithm to find matches, `ExactMatcher` finds exact matches, and `RegexMatcher` finds matches using a regular expression.\n\n3. What is the purpose of the `dynamicMatchWithMapping` and `dynamicMatchHighlight` functions?\n- `dynamicMatchWithMapping` and `dynamicMatchHighlight` are utility functions that allow the caller to dynamically choose which type of matching to use (`fuzzy`, `exact`, or `regex`) based on a `MatchMode` parameter."
}