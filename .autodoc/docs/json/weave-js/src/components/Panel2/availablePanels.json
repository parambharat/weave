{
  "fileName": "availablePanels.tsx",
  "filePath": "weave-js/src/components/Panel2/availablePanels.tsx",
  "url": "https://github.com/wandb/weave/weave-js/src/components/Panel2/availablePanels.tsx",
  "summary": "This code is responsible for managing and recommending panels based on the input data type in the Weave project. It provides functions to get the available panels for a given data type, score and sort the panels based on their relevance, and handle panel dimensions.\n\nThe main function `getPanelStacksForType` takes a data type, an optional panel ID, and options to filter or customize the panel recommendations. It returns an object containing the current panel ID, an array of available panel stacks with their display names, and the handler for the current panel stack.\n\nThe function `getTypeHandlerStacks` is used to get the handler stacks for a given data type. It memoizes the results to improve performance. The function `scoreHandlerStack` assigns a score to a panel stack based on its relevance to the input data type. The higher the score, the more relevant the panel stack is.\n\nThe `usePanelStacksForType` function is a React hook that wraps `getPanelStacksForType` and memoizes its results. It returns the same object as `getPanelStacksForType`.\n\nThe function `getPanelStackDims` calculates the fixed dimensions (width and height) for a panel stack based on its configuration. It returns an object containing the width and height of the panel stack.\n\nThe code also provides utility functions like `panelIsOp`, `getTransformPanel`, and `panelSpecById` to check if a panel is an operation, get the transform panel for a given panel ID, and find a panel specification by its ID, respectively.\n\nExample usage:\n\n```javascript\nconst { curPanelId, stackIds, handler } = getPanelStacksForType(type, panelId, {\n  excludeTable: true,\n  showDebug: false,\n});\n```\n\nThis example retrieves the available panel stacks for a given data type, excluding table panels and debug panels.",
  "questions": "1. **Question**: What is the purpose of the `getTypeHandlerStacksInternal` function and how does it work?\n   **Answer**: The `getTypeHandlerStacksInternal` function is used to get the handler stacks for a given type. It calls the `_getTypeHandlerStacks` function from the `LibTypes` module with the current type, panel specs, converter specs, and the `isAssignableTo` function. It then sorts the resulting stacks, prioritizing those with an ID starting with 'execute'.\n\n2. **Question**: How does the `getPanelStacksForType` function determine the recommendation order for panel stacks?\n   **Answer**: The `getPanelStacksForType` function determines the recommendation order for panel stacks by filtering and sorting the handler stacks based on various conditions and scoring criteria. The sorting is done using the `scoreHandlerStack` function, which assigns scores to each handler stack based on its properties and the input type.\n\n3. **Question**: What is the purpose of the `usePanelStacksForType` function and how does it use the `getPanelStacksForType` function?\n   **Answer**: The `usePanelStacksForType` function is a React hook that wraps the `getPanelStacksForType` function. It memoizes the result of `getPanelStacksForType` to optimize performance and avoid unnecessary re-renders. The function takes the same arguments as `getPanelStacksForType` and returns the result of calling it with the provided arguments and memoized options."
}