{
  "folderName": "PanelPlot",
  "folderPath": ".autodoc/docs/json/weave-js/src/components/Panel2/PanelPlot",
  "url": "https://github.com/wandb/weave/.autodoc/docs/json/weave-js/src/components/Panel2/PanelPlot",
  "files": [
    {
      "fileName": "RadioButtons.tsx",
      "filePath": "weave-js/src/components/Panel2/PanelPlot/RadioButtons.tsx",
      "url": "https://github.com/wandb/weave/weave-js/src/components/Panel2/PanelPlot/RadioButtons.tsx",
      "summary": "This code defines a set of React components and related types for rendering radio buttons used in a panel plot. The `PanelPlotRadioButtons` component is the main export of this module, and it takes two props: `currentValue` and `setMode`. `currentValue` is a string that represents the currently selected brush mode, and `setMode` is a function that takes a string argument and updates the selected brush mode. The `PanelPlotRadioButtons` component renders a set of radio buttons, each of which corresponds to a different brush mode. The available brush modes are defined in the `BRUSH_MODES` constant, which is an array of two strings: `'zoom'` and `'select'`. \n\nThe `PanelPlotRadioButtons` component is composed of several other components, which are also defined in this module. The `IconComponent` component is a styled component that renders an icon for a single radio button. It takes four props: `isDarkMode`, `isActive`, `onClick`, and `name`. `isDarkMode` is a boolean that indicates whether the current color scheme is dark or light. `isActive` is a boolean that indicates whether the current radio button is selected. `onClick` is a function that is called when the radio button is clicked. `name` is a string that specifies the name of the icon to be rendered. The `IconComponent` component is composed of two other styled components: `IconWrapper` and `Icon`. `IconWrapper` is a styled `div` that wraps the `Icon` component and provides a background color and hover effect. `Icon` is a styled `div` that renders the icon itself. \n\nThe `GroupComponent` component is another styled component that renders a group of radio buttons. It takes one prop: `isDarkMode`, which is a boolean that indicates whether the current color scheme is dark or light. The `GroupComponent` component is composed of several `IconComponent` components, one for each brush mode. \n\nOverall, this module provides a set of reusable React components for rendering radio buttons that allow the user to select a brush mode for a panel plot. The `PanelPlotRadioButtons` component can be used in other React components or pages that require this functionality. For example, it might be used in a dashboard that displays multiple panel plots, each with its own set of brush modes.",
      "questions": "1. What is the purpose of this code?\n- This code exports a React component called `PanelPlotRadioButtons` that renders a group of radio buttons with icons and allows the user to select a brush mode.\n\n2. What are the dependencies of this code?\n- This code imports several modules from `@wandb/weave` and `styled-components`.\n\n3. What is the role of the `IconComponent` and `GroupComponent` components?\n- `IconComponent` is a styled component that renders an icon with a wrapper div that changes its background color when hovered or clicked. `GroupComponent` is a styled component that renders a group of child components with a background color and a border."
    }
  ],
  "folders": [],
  "summary": "The `RadioButtons.tsx` file in the `PanelPlot` folder provides a set of React components for rendering radio buttons that allow users to select a brush mode for a panel plot. The main component exported from this module is `PanelPlotRadioButtons`, which takes two props: `currentValue` and `setMode`. `currentValue` is a string representing the currently selected brush mode, while `setMode` is a function that updates the selected brush mode when called with a string argument.\n\nThe available brush modes are defined in the `BRUSH_MODES` constant, which is an array of two strings: `'zoom'` and `'select'`. The `PanelPlotRadioButtons` component renders a set of radio buttons, each corresponding to a different brush mode.\n\n```jsx\n<PanelPlotRadioButtons\n  currentValue={currentBrushMode}\n  setMode={setBrushMode}\n/>\n```\n\nThe `PanelPlotRadioButtons` component is composed of several other components, including `IconComponent` and `GroupComponent`. The `IconComponent` is a styled component that renders an icon for a single radio button. It takes four props: `isDarkMode`, `isActive`, `onClick`, and `name`. `isDarkMode` is a boolean indicating the current color scheme, `isActive` is a boolean indicating whether the current radio button is selected, `onClick` is a function called when the radio button is clicked, and `name` is a string specifying the icon's name.\n\nThe `IconComponent` is further composed of two styled components: `IconWrapper` and `Icon`. `IconWrapper` is a styled `div` that wraps the `Icon` component, providing a background color and hover effect. `Icon` is a styled `div` that renders the icon itself.\n\nThe `GroupComponent` is another styled component that renders a group of radio buttons. It takes one prop: `isDarkMode`, a boolean indicating the current color scheme. The `GroupComponent` is composed of several `IconComponent` components, one for each brush mode.\n\nThese reusable React components can be used in other components or pages that require radio buttons for selecting a brush mode in a panel plot. For example, they might be used in a dashboard that displays multiple panel plots, each with its own set of brush modes.\n\n```jsx\nimport PanelPlotRadioButtons from './PanelPlot/RadioButtons';\n\nfunction Dashboard() {\n  const [currentBrushMode, setBrushMode] = useState('zoom');\n\n  return (\n    <div>\n      <PanelPlotRadioButtons\n        currentValue={currentBrushMode}\n        setMode={setBrushMode}\n      />\n      {/* Render panel plots here */}\n    </div>\n  );\n}\n```\n\nIn summary, the `RadioButtons.tsx` file provides a set of components for rendering radio buttons that allow users to select a brush mode for a panel plot, making it a useful module for any part of the project that requires this functionality.",
  "questions": ""
}