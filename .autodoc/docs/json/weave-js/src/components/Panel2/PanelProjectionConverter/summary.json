{
  "folderName": "PanelProjectionConverter",
  "folderPath": ".autodoc/docs/json/weave-js/src/components/Panel2/PanelProjectionConverter",
  "url": "https://github.com/wandb/weave/.autodoc/docs/json/weave-js/src/components/Panel2/PanelProjectionConverter",
  "files": [
    {
      "fileName": "component.tsx",
      "filePath": "weave-js/src/components/Panel2/PanelProjectionConverter/component.tsx",
      "url": "https://github.com/wandb/weave/weave-js/src/components/Panel2/PanelProjectionConverter/component.tsx",
      "summary": "The `PanelProjectionConverter` module is a React component that provides a configuration panel for a data projection algorithm. It exports two components: `PanelProjectionConverter` and `PanelProjectionConverterConfig`. The former is a dummy component that throws an error if it is rendered directly, while the latter is the actual configuration panel that can be used in the larger project.\n\nThe `PanelProjectionConverterConfig` component takes two props: `input` and `config`. The `input` prop is an object that describes the input data to the projection algorithm, while the `config` prop is an object that describes the configuration of the projection algorithm. The component returns a configuration panel that allows the user to modify the configuration of the projection algorithm.\n\nThe `PanelProjectionConverterConfig` component first checks if the `input` object is of type `TableType.ConvertibleToDataTableType`. If it is, it normalizes the input data and passes it to the `PanelProjectionConverterTableConfig` component. Otherwise, it passes the input data to the `PanelProjectionConverterConfigInner` component.\n\nThe `PanelProjectionConverterTableConfig` component normalizes the input data and passes it to the `PanelProjectionConverterConfigInner` component. The `PanelProjectionConverterConfigInner` component processes the configuration object and the input data to generate a new configuration object that is used to populate the configuration panel. The component also provides utility functions to update the configuration object when the user modifies the configuration panel.\n\nThe configuration panel allows the user to select the projection algorithm (PCA, t-SNE, or UMAP), the type of input data (single embedding column or many numeric columns), and the input data itself. If the user selects t-SNE as the projection algorithm, the panel also allows the user to modify the perplexity, learning rate, and number of iterations. If the user selects UMAP as the projection algorithm, the panel allows the user to modify the number of neighbors, minimum distance, and spread.\n\nOverall, the `PanelProjectionConverter` module provides a flexible and extensible configuration panel for a data projection algorithm that can be used in the larger project.",
      "questions": "1. What is the purpose of this code?\n- This code defines a React component called `PanelProjectionConverter` and its related sub-components. It provides a configuration panel for selecting and configuring different projection algorithms for data visualization.\n\n2. What external libraries or dependencies does this code use?\n- This code imports `immer` and `React` libraries, as well as several custom modules from the project's file structure.\n\n3. What is the purpose of the `useCallback` and `useMemo` hooks used in this code?\n- The `useCallback` hook is used to memoize a function that updates the configuration of the projection algorithm. The `useMemo` hook is used to memoize the result of processing the configuration and getting valid columns from the input data."
    },
    {
      "fileName": "index.tsx",
      "filePath": "weave-js/src/components/Panel2/PanelProjectionConverter/index.tsx",
      "url": "https://github.com/wandb/weave/weave-js/src/components/Panel2/PanelProjectionConverter/index.tsx",
      "summary": "This code defines a panel specification for a 2D projection component in the larger project called \"weave\". The purpose of this code is to provide a way to register and configure a panel that can be used to convert data from one format to another. \n\nThe code imports several modules from the \"weave\" project, including \"Panel2\", \"PComp\", \"POp\", and \"PTypes\". These modules contain various functions and classes that are used to define the panel specification. \n\nThe main component of this code is the \"Spec\" object, which is of type \"Panel2.PanelSpec\". This object contains several properties that define the panel, including an ID, a display name, a component, a configuration component, an input type, an output type, and an equivalent transform. \n\nThe \"id\" property is a string that uniquely identifies the panel. The \"displayName\" property is a string that is used to display the name of the panel in the user interface. The \"Component\" property is a reference to the component that is used to convert the data. The \"ConfigComponent\" property is a reference to the component that is used to configure the conversion. The \"inputType\" property is a reference to the type of data that is input to the component. The \"outputType\" property is a reference to the type of data that is output from the component. The \"equivalentTransform\" property is a reference to a function that can be used to transform the data in an equivalent way. \n\nThe code also registers the panel function using the \"Panel2.registerPanelFunction\" method. This method takes the panel ID, input type, and equivalent transform as arguments. \n\nOverall, this code provides a way to define and register a panel for converting data in the \"weave\" project. Here is an example of how this code might be used:\n\n```\nimport { Spec } from 'weave/projection';\n\n// Define a new panel specification\nconst myPanelSpec = {\n  id: 'my-panel',\n  displayName: 'My Panel',\n  Component: MyPanelComponent,\n  ConfigComponent: MyPanelConfigComponent,\n  inputType: MyInputType,\n  outputType: MyOutputType,\n  equivalentTransform: MyEquivalentTransform,\n};\n\n// Register the panel function\nPanel2.registerPanelFunction(\n  myPanelSpec.id,\n  myPanelSpec.inputType,\n  myPanelSpec.equivalentTransform!\n);\n\n// Use the panel in the user interface\n<Panel2.Panel\n  spec={myPanelSpec}\n  data={myData}\n  onDataChanged={handleDataChanged}\n/>\n```",
      "questions": "1. What is the purpose of the `weave` project?\n- As a code documentation expert, I cannot answer this question based on the given code alone. More information about the project is needed to determine its purpose.\n\n2. What is the `Panel2` module and where is it located?\n- The `Panel2` module is imported from a file located at `'../panel'`. More information about the contents of this file is needed to determine the purpose of the `Panel2` module.\n\n3. What is the `registerPanelFunction` method and what does it do?\n- The `registerPanelFunction` method is called with the `id`, `inputType`, and `equivalentTransform` properties of the `Spec` object as arguments. More information about the purpose of this method and how it is used within the `weave` project is needed to fully understand its functionality."
    },
    {
      "fileName": "op.ts",
      "filePath": "weave-js/src/components/Panel2/PanelProjectionConverter/op.ts",
      "url": "https://github.com/wandb/weave/weave-js/src/components/Panel2/PanelProjectionConverter/op.ts",
      "summary": "The `weave` project contains a file that exports two functions: `outputType` and `equivalentTransform`. These functions are used to define the output type and transformation logic for a panel in the larger project.\n\nThe `outputType` function takes an input type and returns a list of typed dictionaries. If the input type is a table type, the function returns a list of typed dictionaries with an empty dictionary as the source type. Otherwise, the function returns a list of typed dictionaries with the input type as the source type. The output type also includes a minimum and maximum length for the list.\n\nHere is an example usage of the `outputType` function:\n\n```\nimport { outputType } from 'weave';\n\nconst inputType = list(typedDict({ x: 'number', y: 'number' }));\nconst output = outputType(inputType);\n\nconsole.log(output);\n// Output: list(typedDict({ source: listObjectType(list(typedDict({ x: 'number', y: 'number' }))), projection: list('number') }), listMinLength(list(typedDict({ x: 'number', y: 'number' }))), listMaxLength(list(typedDict({ x: 'number', y: 'number' }))))\n```\n\nThe `equivalentTransform` function takes an input node, configuration object, and a refine type function. If the input node is a table type, the function normalizes the table and refines the type. Then, the function applies a 2D projection algorithm to the input node and returns the result as a new node. If the resolved type is not assignable to the expected return type, the function returns a default node.\n\nHere is an example usage of the `equivalentTransform` function:\n\n```\nimport { equivalentTransform } from 'weave';\n\nconst inputNode = constNodeUnsafe(list(typedDict({ x: 'number', y: 'number' })), [{ x: 1, y: 2 }, { x: 3, y: 4 }]);\nconst config = { projectionAlgorithm: 'tsne', inputCardinality: 'one', inputColumnNames: ['x', 'y'], algorithmOptions: { perplexity: 30, learningRate: 200, iterations: 1000 } };\nconst refineType = async (node) => node;\n\nconst outputNode = await equivalentTransform(inputNode, config, refineType);\n\nconsole.log(outputNode);\n// Output: constNodeUnsafe(list(typedDict({ projection: typedDict({ x: 'number', y: 'number' }), source: listObjectType(list(typedDict({ x: 'number', y: 'number' }))) })), [{ projection: { x
      "questions": "1. What is the purpose of the `weave` package and what does it provide?\n- The `weave` package provides a set of core functions and types that are used in the `weave` project. It includes functions for working with lists, typed dictionaries, and projections.\n\n2. What is the `outputType` function and what does it return?\n- The `outputType` function is a PanelSpec output type function that takes an input type and returns a list of typed dictionaries. The `source` field is a list of objects with the same type as the input type, and the `projection` field is a list of numbers. The function also enforces a minimum and maximum length for the `source` field.\n\n3. What is the `equivalentTransform` function and what does it do?\n- The `equivalentTransform` function is a PanelSpec equivalent transform function that takes an input node, a configuration object, and a refine type function. It first checks if the input node is a table type and normalizes it if necessary. If the resolved type is not assignable to the expected return type, it returns a default node. Otherwise, it processes the configuration object and applies a table 2D projection operation to the input node."
    },
    {
      "fileName": "types.ts",
      "filePath": "weave-js/src/components/Panel2/PanelProjectionConverter/types.ts",
      "url": "https://github.com/wandb/weave/weave-js/src/components/Panel2/PanelProjectionConverter/types.ts",
      "summary": "This file contains various type definitions and constants related to the `weave` project. \n\nThe `ProjectableType` constant is an object that represents a list of objects with typed properties. It is used to define the structure of data that can be projected onto a panel. The `inputType` constant is an object that represents a union of two types: `ProjectableType` and `TableType.ConvertibleToDataTableType`. This is used to define the input type for the `PanelProjectionConverter` function, which is responsible for converting input data into a format that can be projected onto a panel.\n\nThe file also defines several type definitions related to different projection algorithms. The `tsneAlgorithmOptionsType` type represents the options for the t-SNE algorithm, which is used for dimensionality reduction. The `pcaAlgorithmOptionsType` type represents the options for the PCA algorithm, which is also used for dimensionality reduction. The `umapAlgorithmOptionsType` type represents the options for the UMAP algorithm, which is used for non-linear dimensionality reduction.\n\nFinally, the file defines the `PanelProjectionConverterConfigType` type, which is used to configure the `PanelProjectionConverter` function. This type includes several properties, including the projection algorithm to use, the input cardinality (single or multiple), the input column names, and the algorithm options. \n\nOverall, this file provides the necessary type definitions and constants for the `weave` project to perform data projection and dimensionality reduction. Developers can use these types and constants to ensure that their code is properly typed and structured. For example, they can use the `PanelProjectionConverterConfigType` type to configure the `PanelProjectionConverter` function and ensure that the input data is properly formatted. \n\nExample usage:\n\n```\nimport { PanelProjectionConverterConfigType } from 'weave';\n\nconst config: PanelProjectionConverterConfigType = {\n  projectionAlgorithm: 'tsne',\n  inputCardinality: 'multiple',\n  inputColumnNames: ['x', 'y', 'z'],\n  algorithmOptions: {\n    tsne: {\n      perplexity: 30,\n      learningRate: 200,\n      iterations: 1000,\n    },\n  },\n};\n\n// Use the config to call the PanelProjectionConverter function\nconst projectedData = PanelProjectionConverter(data, config);\n```",
      "questions": "1. What is the purpose of the `weave` project and how does this file fit into it?\n- This code file is defining several types and constants related to panel projection conversion, but without more context it is unclear how this fits into the overall purpose of the `weave` project.\n\n2. What is the difference between `ProjectableType` and `inputType`?\n- `ProjectableType` is a constant representing a list of objects with a specific structure, while `inputType` is a union type that can contain either `ProjectableType` objects or objects of a different type defined in another file.\n\n3. What are the possible values for `projectionAlgorithm` and what do they represent?\n- `projectionAlgorithm` can be one of three string literals: `'tsne'`, `'pca'`, or `'umap'`. These represent different algorithms that can be used for panel projection conversion, and each has its own set of options defined in the `algorithmOptions` object."
    },
    {
      "fileName": "util.ts",
      "filePath": "weave-js/src/components/Panel2/PanelProjectionConverter/util.ts",
      "url": "https://github.com/wandb/weave/weave-js/src/components/Panel2/PanelProjectionConverter/util.ts",
      "summary": "The `weave` project includes a file that exports two functions: `getValidColumns` and `processConfig`. \n\nThe `getValidColumns` function takes a `Type` input and returns an object with two properties: `validEmbeddingColumns` and `validNumericColumns`. The function first retrieves the inner type of the input, which is a nullable taggable value of a list object type. If the inner type is assignable to a typed dictionary, the function uses the `allObjPaths` function from the `@wandb/weave/core` library to retrieve all possible paths in the dictionary. It then filters the paths to find those that are assignable to a `maybe(list('number'))` type and those that are assignable to a `maybe('number')` type, and maps the paths to their respective column names. The function returns an object with the two arrays of column names.\n\nThe `processConfig` function takes two inputs: a configuration object and a `Node` object with a generic type `U`. The function first calls `getValidColumns` with the `type` property of the `inputNode` object to retrieve the valid column names. It then sets the `projectionAlgorithm` property of the output object to the `projectionAlgorithm` property of the input configuration object, or to `'pca'` if the property is not defined. It sets the `inputCardinality` property to `'single'` if there is at least one valid embedding column, or to `'multiple'` otherwise, or to the `inputCardinality` property of the input configuration object if it is defined. It sets the `inputColumnNames` property to the `inputColumnNames` property of the input configuration object, or to an empty array if the property is not defined. If the `inputCardinality` is `'single'`, the function checks if the `inputColumnNames` array contains a valid embedding column name, and sets it to an empty array if it does not. If the `inputColumnNames` array is empty and there is at least one valid embedding column, the function sets it to an array containing the first valid embedding column name. If the `inputCardinality` is `'multiple'`, the function checks if the `inputColumnNames` array contains only valid numeric column names, and sets it to an empty array if it does not. If the `inputColumnNames` array is empty and there are valid numeric column names, the function sets it to an array containing all valid numeric column names. Finally, the function sets the `algorithmOptions` property of the output object to an object with properties for the `'pca'`, `'tsne'`, and `'umap'` algorithms, with default values or values from the input configuration object if defined.\n\nThis code is likely used in the larger project to process a configuration object for a panel projection converter, which takes a dataset and projects it onto a two-dimensional plane for visualization. The `getValidColumns` function is used to retrieve the valid column names from the dataset, and the `processConfig` function is used to set the configuration options for the converter based on the input configuration object and the valid column names. An example usage of the `processConfig` function might look like this:\n\n```\nimport { Node } from '@wandb/weave/core';\nimport { processConfig } from 'weave';\n\nconst config = {\n  projectionAlgorithm: 'tsne',\n  inputCardinality: 'single',\n  inputColumnNames: ['embedding'],\n  algorithmOptions: {\n    tsne: {\n      perplexity: 50,\n      learningRate: 5,\n      iterations: 100,\n    },\n  },\n};\n\nconst inputNode: Node<{embedding: number[]}> = {\n  type: {embedding: list('number')},\n  value: {embedding: [1, 2, 3]},\n};\n\nconst panelProjectionConverterConfig = processConfig(config, inputNode);\nconsole.log(panelProjectionConverterConfig);\n// Output: {\n//   projectionAlgorithm: 'tsne',\n//   inputCardinality: 'single',\n//   inputColumnNames: ['embedding'],\n//   algorithmOptions: {\n//     pca: {},\n//     tsne: {\n//       perplexity: 50,\n//       learningRate: 5,\n//       iterations: 100,\n//     },\n//     umap: {\n//       neighbors: 15,\n//       minDist: 0.1,\n//       spread: 1.0,\n//     },\n//   },\n// }\n```",
      "questions": "1. What is the purpose of the `weave` project and how does this code fit into it?\n- This code is a module within the `weave` project, but it is unclear what the overall purpose of the project is.\n\n2. What is the expected input and output of the `getValidColumns` function?\n- The `getValidColumns` function takes in a `Type` object and returns an object with two arrays of strings. It is unclear what these arrays represent or how they are used.\n\n3. What is the purpose of the `processConfig` function and what are the possible values for its input parameters?\n- The `processConfig` function takes in an `any` object and a `Node` object, and returns a `PanelProjectionConverterConfigType` object. It is unclear what the expected structure of the `config` object is or how the returned object is used."
    }
  ],
  "folders": [],
  "summary": "The `PanelProjectionConverter` module in the `weave-js` project provides a configuration panel for a data projection algorithm. It exports two components: `PanelProjectionConverter` and `PanelProjectionConverterConfig`. The former is a dummy component that throws an error if it is rendered directly, while the latter is the actual configuration panel that can be used in the larger project.\n\nThe `PanelProjectionConverterConfig` component takes two props: `input` and `config`. The `input` prop is an object that describes the input data to the projection algorithm, while the `config` prop is an object that describes the configuration of the projection algorithm. The component returns a configuration panel that allows the user to modify the configuration of the projection algorithm.\n\nThe module also provides utility functions to process the configuration object and the input data to generate a new configuration object that is used to populate the configuration panel. The configuration panel allows the user to select the projection algorithm (PCA, t-SNE, or UMAP), the type of input data (single embedding column or many numeric columns), and the input data itself.\n\nIn addition, the module defines various type definitions and constants related to the projection algorithms, such as `ProjectableType`, `inputType`, and the configuration types for PCA, t-SNE, and UMAP algorithms. These types and constants ensure that the code is properly typed and structured.\n\nHere is an example of how this code might be used:\n\n```javascript\nimport { Spec } from 'weave/projection';\n\n// Define a new panel specification\nconst myPanelSpec = {\n  id: 'my-panel',\n  displayName: 'My Panel',\n  Component: MyPanelComponent,\n  ConfigComponent: MyPanelConfigComponent,\n  inputType: MyInputType,\n  outputType: MyOutputType,\n  equivalentTransform: MyEquivalentTransform,\n};\n\n// Register the panel function\nPanel2.registerPanelFunction(\n  myPanelSpec.id,\n  myPanelSpec.inputType,\n  myPanelSpec.equivalentTransform!\n);\n\n// Use the panel in the user interface\n<Panel2.Panel\n  spec={myPanelSpec}\n  data={myData}\n  onDataChanged={handleDataChanged}\n/>\n```\n\nOverall, the `PanelProjectionConverter` module provides a flexible and extensible configuration panel for a data projection algorithm that can be used in the larger project. The module ensures that the input data and configuration objects are properly typed and structured, and it provides utility functions to process the input data and configuration objects to generate a new configuration object for the panel.",
  "questions": ""
}