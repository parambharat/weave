{
  "fileName": "NumberContentEditable.tsx",
  "filePath": "weave-js/src/components/Panel2/NumberContentEditable.tsx",
  "url": "https://github.com/wandb/weave/weave-js/src/components/Panel2/NumberContentEditable.tsx",
  "summary": "The `NumberContentEditable` component in the `weave` project is a React functional component that provides a content-editable span element for users to input numbers. The component takes in a set of props that define its behavior and appearance. \n\nThe `NumberContentEditableProps` interface defines the props that can be passed to the component. These include the class name, a reference to the inner HTML element, a boolean flag to indicate whether the input should accept floating-point numbers, the minimum and maximum values that can be entered, and several event handlers for when the input is changed, focused, or blurred. \n\nThe `unescapeString` function is a helper function that takes in a string and returns the unescaped text content of an HTML element. This function is used to convert the inner HTML of the content-editable span element into plain text before passing it to the `onTempChange` callback function. \n\nThe `NumberContentEditable` component uses the `useRef` and `useEffect` hooks to manage the state of the input element. The `fallbackRef` is used as a reference to the inner HTML element if no other reference is provided. The `useEffect` hook is used to update the inner HTML of the content-editable span element when the `value` prop changes. \n\nThe component returns a content-editable span element that is styled with the class name passed in as a prop. The `onKeyDown` event handler is used to capture the user's input and handle the Enter key press. The `onFocus` and `onBlur` event handlers are used to handle when the input is focused and blurred, respectively. \n\nWhen the input is blurred, the `onBlur` event handler is called. This handler checks if the input is a valid number and calls the `onChange` callback function with the parsed value. If the input is not a valid number, the inner HTML of the content-editable span element is reset to the previous value. \n\nOverall, the `NumberContentEditable` component provides a flexible and customizable way for users to input numbers in the `weave` project. Here is an example of how the component can be used in a React component:\n\n```\nimport React, { useState } from 'react';\nimport NumberContentEditable from './NumberContentEditable';\n\nfunction MyComponent() {\n  const [value, setValue] = useState(0);\n\n  const handleChange = (newValue) => {\n    setValue(newValue);\n  };\n\n  return (\n    <div>\n      <NumberContentEditable\n        value={value}\n        onChange={handleChange}\n        float\n        min={0}\n        max={100}\n      />\n    </div>\n  );\n}\n```",
  "questions": "1. What is the purpose of the `NumberContentEditable` component?\n- The `NumberContentEditable` component is a React functional component that renders a content-editable span element that allows users to input and edit numbers.\n\n2. What are the props that can be passed to the `NumberContentEditable` component?\n- The `NumberContentEditable` component accepts several props, including `className`, `innerRef`, `float`, `value`, `min`, `max`, `onTempChange`, `onKeyDown`, `onChange`, `onFocus`, and `onBlur`.\n\n3. What is the purpose of the `unescapeString` function?\n- The `unescapeString` function takes a string as input and returns the unescaped text content of the string by parsing it as HTML using the `DOMParser` API. This function is used to handle temporary changes to the content-editable span element."
}