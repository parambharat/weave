{
  "fileName": "persistenceStateMachine.ts",
  "filePath": "weave-js/src/components/PagePanelComponents/persistenceStateMachine.ts",
  "url": "https://github.com/wandb/weave/weave-js/src/components/PagePanelComponents/persistenceStateMachine.ts",
  "summary": "The `weave` project includes a file that defines a state machine for managing the persistence of artifacts. The code defines several types and functions that are used to determine the current state of an artifact and the available actions that can be taken to modify its state. The state machine is designed to work with local and remote artifacts, and it includes actions for saving, renaming, publishing, and committing changes to artifacts.\n\nThe code imports several functions and types from other modules in the `weave` project, including `NodeOrVoidNode`, `callOpVeryUnsafe`, `constString`, `constNone`, `maybe`, and `opGet` from `@wandb/weave/core`, and `useNodeValueExecutor` and `useMakeMutation` from `@wandb/weave/react`. It also imports several utility functions from a local module called `util`.\n\nThe code defines several types, including `LocalPersistenceStateId`, `CloudPersistenceStateId`, `PersistenceState`, `PersistenceRenameActionType`, `PersistenceStoreActionType`, `PersistenceAction`, `ActionSetType`, and `NodeForm`. These types are used to define the possible states of an artifact and the actions that can be taken to modify its state.\n\nThe code defines a function called `stateFromURI` that takes a URI and a boolean indicating whether the artifact has a remote branch, and returns the current state of the artifact. The function uses the `isServedLocally`, `isRemoteURI`, and `isLocalURI` functions from `util` to determine whether the artifact is local or remote, and whether it has a remote branch. It then maps the artifact's state to one of the `LocalPersistenceStateId` or `CloudPersistenceStateId` types.\n\nThe code defines a function called `getAvailableActions` that takes a `PersistenceState` and a boolean indicating whether the user is authenticated, and returns an `ActionSetType` object that contains the available actions for the artifact. The function uses the `persistenceActions` object to determine the available actions based on the current state of the artifact, and filters out any actions that require authentication if the user is not authenticated.\n\nThe code defines a function called `useStateMachine` that takes an `inputNode`, an `updateNode` function, and a boolean indicating whether the artifact has a remote branch, and returns an object that contains the current state of the artifact, a `takeAction` function that can be used to modify the artifact's state, and a boolean indicating whether an action is currently being performed. The function uses the `stateFromURI` function to determine the initial state of the artifact, and the `useNodeValueExecutor` and `useMakeMutation` hooks from `@wandb/weave/react` to execute mutations on the artifact. The `takeAction` function takes a `PersistenceAction`, an optional object containing action options, and an optional callback function to be called when the action is finished. The function uses the `makeMutation` function to modify the artifact based on the action, and updates the artifact's state based on the result of the mutation.\n\nOverall, this code provides a state machine for managing the persistence of artifacts in the `weave` project. The state machine is designed to work with local and remote artifacts, and it includes actions for saving, renaming, publishing, and committing changes to artifacts. The `stateFromURI` function is used to determine the initial state of an artifact based on its URI, and the `getAvailableActions` function is used to determine the available actions for an artifact based on its current state and the user's authentication status. The `useStateMachine` function provides a way to modify the state of an artifact using the available actions, and it includes a callback function that can be used to perform additional actions after an action is finished.",
  "questions": "1. What is the purpose of the `PersistenceState` and `PersistenceAction` types?\n- The `PersistenceState` type represents the possible states of a persistence artifact, while the `PersistenceAction` type represents the possible actions that can be taken on a persistence artifact.\n\n2. What is the significance of the `actionsRequiringAuthentication` set?\n- The `actionsRequiringAuthentication` set contains the `PersistenceAction` values that require authentication to be performed. If a developer is not authenticated, these actions will be nullified.\n\n3. What is the purpose of the `useStateMachine` function?\n- The `useStateMachine` function is used to manage the state of a persistence artifact and perform actions on it. It takes in an input node, updates the node, and returns the current state of the artifact, a function to take actions on the artifact, and a boolean indicating whether an action is currently being performed."
}