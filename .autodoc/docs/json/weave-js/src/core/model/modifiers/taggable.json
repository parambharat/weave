{
  "fileName": "taggable.ts",
  "filePath": "weave-js/src/core/model/modifiers/taggable.ts",
  "url": "https://github.com/wandb/weave/weave-js/src/core/model/modifiers/taggable.ts",
  "summary": "The `weave` module provides a set of utility functions for working with tagged values. Tagged values are values that are associated with a tag, which can be used to provide additional context or meaning to the value. The module provides functions for manipulating and transforming tagged values, as well as functions for working with values that may or may not be tagged.\n\nThe `taggable` function takes a `Type` object and a function that transforms a `Type` object, and returns a new `Type` object that is the result of applying the transformation function to the original `Type`. If the original `Type` is a tagged value, the transformation function is applied to the value associated with the tag, and a new tagged value is returned with the same tag and the transformed value. If the original `Type` is a union of tagged values, the transformation function is applied to each member of the union, and a new union of tagged values is returned with the same tags and the transformed values.\n\nThe `taggableAsync` function is similar to `taggable`, but the transformation function is asynchronous and returns a `Promise`.\n\nThe `taggableStrip` function takes a `Type` object and returns a new `Type` object that is the value associated with the tag of the original `Type`, if it is a tagged value. Otherwise, the original `Type` is returned.\n\nThe `taggableVal` function takes a value and a function that transforms a value, and returns a new value that is the result of applying the transformation function to the original value. If the original value is a tagged value, the transformation function is applied to the value associated with the tag, and a new tagged value is returned with the same tag and the transformed value.\n\nThe `taggableValAsync` function is similar to `taggableVal`, but the transformation function is asynchronous and returns a `Promise`.\n\nThe `skipTaggable` function takes a `Type` object and a function that transforms a `Type` object, and returns a new `Type` object that is the result of applying the transformation function to the value associated with the tag of the original `Type`, if it is a tagged value. Otherwise, the transformation function is applied to the original `Type`.\n\nThe `skipTaggableAsync` function is similar to `skipTaggable`, but the transformation function is asynchronous and returns a `Promise`.\n\nThe `skipTaggableVal` function takes a value and a function that transforms a value, and returns the result of applying the transformation function to the value associated with the tag of the original value, if it is a tagged value. Otherwise, the transformation function is applied to the original value.\n\nThe `skipTaggableValAsync` function is similar to `skipTaggableVal`, but the transformation function is asynchronous and returns a `Promise`.\n\nThese functions can be used to manipulate and transform tagged values in a variety of ways, such as stripping tags, applying transformations to values associated with specific tags, and transforming entire unions of tagged values. They can be used in conjunction with other functions in the `weave` module to build complex data structures and perform operations on them.",
  "questions": "1. What is the purpose of the `taggable` function?\n   - The `taggable` function takes a `Type` and applies a function to its value if it is a `TaggedValue` or a `TaggedValueUnion`, and returns the modified `Type`. Otherwise, it applies the function to the original `Type`.\n2. What is the difference between `taggableVal` and `taggableValAsync`?\n   - `taggableVal` takes a `Val` and applies a function to its value, returning a modified `ConcreteTaggedValue` if the input is a `ConcreteTaggedValue`. `taggableValAsync` does the same thing, but the function it applies is asynchronous and returns a `Promise`.\n3. What is the purpose of the `skipTaggable` function?\n   - The `skipTaggable` function takes a `Type` and applies a function to its value if it is a `TaggedValueLike`, returning the modified `Type`. Otherwise, it applies the function to the original `Type`. If the input is a `TaggedValueLike`, the function is applied to the value and the tag type separately."
}