{
  "fileName": "util.ts",
  "filePath": "weave-js/src/core/opStore/util.ts",
  "url": "https://github.com/wandb/weave/weave-js/src/core/opStore/util.ts",
  "summary": "The `weave` project contains a module with a file that provides utility functions for working with operations (ops) in a graph. The file contains functions for getting op definitions by display name, determining the display name of an op, determining if an op is unary or binary, determining if an op is dot-chained or uses brackets, and determining if an op needs parentheses to clarify the order of operations given its position in the graph. \n\nThe `getOpDefsByDisplayName` function takes a display name and an op store and returns an array of op definitions that have the given display name. The `opDisplayName` function takes an op and an op store and returns the display name of the op. If the op is binary or unary, the function returns the symbol for the op. If the op name contains a hyphen, the function returns the second part of the name. The `opSymbol` function takes an op and an op store and returns the symbol for the op. If the op does not have a symbolic representation, the function throws an error. The `isUnaryOp` and `isBinaryOp` functions take an op and an op store and return true if the op is unary or binary, respectively. The `isDotChainedOp` function takes an op and an op store and returns true if the op is dot-chained. The `isBracketsOp` function takes an op and an op store and returns true if the op uses brackets. The `isGetAttr` function takes an op and an op store and returns true if the op is the `Object-__getattr__` op.\n\nThe `getOpAssociativity` function takes an op name and returns the associativity of the op. If the op name is `number-powBinary`, the function returns `Side.RIGHT`, otherwise it returns `Side.LEFT`. The `getOpPrecedence` function takes an op name and returns the precedence of the op. The function uses a list of op precedences, where each element of the list is an array of op names with the same precedence. If the op name is not in the list, the function returns the length of the list, which is the highest possible precedence.\n\nThe `opNeedsParens` function takes an op, a graph, and an op store and returns true if the op needs parentheses to clarify the order of operations given its position in the graph. The function first checks if the op is binary. If it is not, the function returns false. The function then tries to find the output of the op in the graph. If it cannot find the output, the function returns false. The function then finds the consuming op of the output and the index of the argument that corresponds to the output. If it cannot find the consuming op, the function returns false. If the consuming op is dot-chained or uses brackets and the output is the first argument, the function returns true. If the consuming op is dot-chained or uses brackets and the output is not the first argument, the function returns false. The function then checks if the consuming op can steal the output argument. If it cannot, the function returns false. The function then compares the precedence and associativity of the op and the consuming op to determine if the op needs parentheses. If it does, the function returns true, otherwise it returns false.\n\nThe `findConsumingOp` function takes a node and a graph and returns the consuming op of the node, the index of the argument that corresponds to the node, and the name of the argument. The function first filters the graph to find all output nodes that have the node as an input. If there are no output nodes, the function returns undefined. If there are more than one output nodes, the function throws an error. The function then gets the names and nodes of the arguments of the consuming op and finds the index of the argument that corresponds to the node. The function then returns the consuming op, the index, and the name.\n\nThe `findOutputOf` function takes an op and a graph and returns the output node of the op. The function filters the graph to find all output nodes that have the op as the fromOp property. If there is not exactly one output node, the function throws an error. The function then returns the output node.\n\nThe `nodeIsValidAsNamedArg` function takes an op definition, an argument name, and a possible argument value and returns true if the argument value is valid for the argument name in the op definition. The function first gets the type of the argument from the op definition. If the type is null, the function returns true. Otherwise, the function checks if the type of the argument value is assignable to the type of the argument in the op definition. If it is not, the function returns false. If the type of the argument value is a run type, the function checks if the output type of the run type is assignable to the type of the argument in the op definition. If it is not, the function returns false. Otherwise, the function returns true.\n\nThe `opInputsAreValid` function takes an op inputs object and an op definition and returns true if all of the inputs are valid for the op definition. The function iterates over the entries of the inputs object and checks if each input is valid using the `nodeIsValidAsNamedArg` function. If any input is not valid, the function returns false. Otherwise, the function returns true.",
  "questions": "1. What is the purpose of the `getOpDefsByDisplayName` function?\n- The `getOpDefsByDisplayName` function returns an array of `OpDef` objects that have a matching display name to the input `displayName` parameter, from the `opStore` object.\n\n2. What is the purpose of the `opNeedsParens` function?\n- The `opNeedsParens` function determines whether a given binary operator needs parentheses to clarify the order of operations, given its position in the graph.\n\n3. What is the purpose of the `opInputsAreValid` function?\n- The `opInputsAreValid` function checks whether the inputs of a given `EditingOp` object are valid according to the input types specified in the corresponding `OpDef` object."
}