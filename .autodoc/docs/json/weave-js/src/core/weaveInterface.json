{
  "fileName": "weaveInterface.ts",
  "filePath": "weave-js/src/core/weaveInterface.ts",
  "url": "https://github.com/wandb/weave/weave-js/src/core/weaveInterface.ts",
  "summary": "This file defines the `WeaveInterface` interface, which consolidates access to all Weave-related functions. The interface includes methods for calling operations, expanding nodes, refining nodes, and providing suggestions. \n\nThe `WeaveInterface` interface also includes methods for checking if a type is assignable to another type, converting a type to a string, and retrieving an operation definition by name. \n\nOne notable method is `expression`, which takes an input string and an optional stack and returns a promise that resolves to an `ExpressionResult`. This method relies on parser logic from Weave and is not part of the core `WeaveInterface`. \n\nAnother notable method is `suggestions`, which takes an editing node or editing operation, a graph, a stack, and an optional query string. This method returns a promise that resolves to an array of `AutosuggestResult` objects, which contain suggestions for completing the input. \n\nOverall, the `WeaveInterface` interface provides a consolidated and standardized way to access Weave-related functions. It can be used by other parts of the larger project to interact with Weave and perform various operations. \n\nExample usage:\n\n```\nimport { WeaveInterface } from 'weave';\n\n// create a new instance of the WeaveInterface\nconst weave: WeaveInterface = new WeaveInterfaceImpl();\n\n// call an operation by name\nconst opDef = weave.op('add');\n\n// expand a node\nconst expandedNode = await weave.expandAll(node, stack);\n\n// refine an editing node\nconst refinedNode = await weave.refineEditingNode(node, stack);\n\n// get suggestions for completing an input\nconst suggestions = await weave.suggestions(node, graph, stack, 'my query');\n```",
  "questions": "1. What is the purpose of the `WeaveInterface` and what methods does it provide?\n- The `WeaveInterface` provides consolidated access to all weave-related functions and exports parts of the weave API. It includes methods such as `typeIsAssignableTo`, `op`, `callOp`, `expression`, `suggestions`, and more.\n\n2. What is the purpose of the `expression` method and why is it not part of the core `WeaveInterface`?\n- The `expression` method takes an input string and an optional stack and returns a Promise that resolves to an `ExpressionResult`. It is not part of the core `WeaveInterface` because it relies on a lot of parser logic from weave.\n\n3. What is the purpose of the `expandAll` method and what does it take as input?\n- The `expandAll` method takes an `EditingNode` and a `Stack` as input and returns a Promise that resolves to an `EditingNode`. Its purpose is to expand all nodes in the given `EditingNode` and return the resulting `EditingNode`."
}