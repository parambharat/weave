{
  "fileName": "generateDocs.ts",
  "filePath": "weave-js/src/core/generateDocs.ts",
  "url": "https://github.com/wandb/weave/weave-js/src/core/generateDocs.ts",
  "summary": "The `weave` project is a codebase that provides a visual interface for building data pipelines. The code in this file is responsible for generating documentation for the project's data types and associated operations. \n\nThe code begins by importing various dependencies, including `fs/promises` for file system access, `lodash` for utility functions, and several modules from the `weave` project itself. It then defines an interface for the documentation of an operation definition (`OpDefDoc`), which includes the operation's name, description, argument descriptions, and return value description. \n\nThe `typeToOpDefDocs` function takes a `Type` object and returns an object with two properties: `singular` and `list`. Each of these properties is an array of `OpDefDoc` objects representing the operations that can be performed on the input type. The function first generates an expression for the singular and list versions of the input type, then uses the `autosuggest` function to get a list of suggestions for each expression. It then filters out any suggestions that are not output nodes or editing operations, and generates an `OpDefDoc` object for each remaining suggestion. \n\nThe `opDefToOpDefDoc` function takes an `OpDef` object and returns an `OpDefDoc` object with the same properties, but with the argument types and return value type converted to strings using the `defaultLanguageBinding.printType` function. \n\nThe `renderOpDefDoc` function takes an `OpDefDoc` object and returns a markdown-formatted string representing the documentation for the operation. \n\nThe `writeTypeDocs` function is the main entry point for the code. It first creates a directory for the generated documentation, then iterates over each data type in the `TYPES_WITH_PAGES` array. For each data type, it generates the `OpDefDoc` objects for the type's singular and list versions using the `typeToOpDefDocs` function, then generates markdown documentation for each operation using the `renderOpDefDoc` function. It then writes the documentation to a file in the generated documentation directory. Finally, it generates a table of contents for the documentation and writes it to the `README.md` file in the generated documentation directory. \n\nOverall, this code is responsible for generating documentation for the `weave` project's data types and operations. It does this by using the `autosuggest` function to find all operations that can be performed on each data type, then generating markdown documentation for each operation. The resulting documentation is organized by data type and includes a table of contents for easy navigation.",
  "questions": "1. What is the purpose of the `weave` project?\n- The purpose of the `weave` project is not clear from this code alone.\n\n2. What is the `typeToOpDefDocs` function doing?\n- The `typeToOpDefDocs` function takes a `Type` object as input and returns an object with two properties: `singular` and `list`. Each property is an array of `OpDefDoc` objects that describe the chainable and list operations that can be performed on the input type.\n\n3. What is the `writeTypeDocs` function doing?\n- The `writeTypeDocs` function generates documentation for the types used in the `weave` project. It creates a markdown file for each type that includes descriptions of the chainable and list operations that can be performed on that type. The function also generates a README file that lists all of the generated type documentation files."
}