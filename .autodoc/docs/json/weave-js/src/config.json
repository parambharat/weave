{
  "fileName": "config.ts",
  "filePath": "weave-js/src/config.ts",
  "url": "https://github.com/wandb/weave/weave-js/src/config.ts",
  "summary": "This code defines an interface called `Config` which specifies a set of methods and properties that can be used to configure the behavior of the `weave` project. The `Config` interface includes a boolean property called `ENABLE_DEBUG_FEATURES` and three methods: `urlPrefixed`, `backendWeaveExecutionUrl`, and `backendWeaveViewerUrl`. \n\nThe `urlPrefixed` method takes a string argument and returns a string with a URL prefix. The `backendWeaveExecutionUrl` method takes an optional boolean argument and returns a string with a URL for executing a Weave backend. If the `shadow` argument is true, the URL will include a `/shadow_execute` path, otherwise it will include a `/execute` path. The `backendWeaveViewerUrl` method returns a string with a URL for viewing a Weave backend. The `backendWeaveOpsUrl` method returns a string with a URL for performing operations on a Weave backend.\n\nThe code also defines a constant called `WEAVE_BACKEND_HOST` which is set to the value of `window.CONFIG.WEAVE_BACKEND_HOST` if it exists, otherwise it is set to an empty string.\n\nThe code then defines a default configuration object called `DEFAULT_CONFIG` which includes the `urlPrefixed`, `backendWeaveExecutionUrl`, `backendWeaveOpsUrl`, and `backendWeaveViewerUrl` methods, as well as the `ENABLE_DEBUG_FEATURES` property. The `urlPrefixed` method is set to a function that simply returns the input string. The `backendWeaveExecutionUrl`, `backendWeaveOpsUrl`, and `backendWeaveViewerUrl` methods are set to the corresponding functions defined earlier in the code. The `ENABLE_DEBUG_FEATURES` property is set to `false`.\n\nFinally, the code exports a function called `getConfig` which returns the current configuration object. The code also exports a function called `setConfig` which takes a partial configuration object as an argument and merges it with the current configuration object.\n\nThis code allows the `weave` project to be configured with various options, such as enabling debug features or specifying URLs for backend execution and viewing. The `getConfig` function can be used to retrieve the current configuration object, while the `setConfig` function can be used to update the configuration object with new values. For example:\n\n```\nimport getConfig, { setConfig } from 'weave';\n\n// Get the current configuration object\nconst config = getConfig();\n\n// Update the configuration object with new values\nsetConfig({\n  ENABLE_DEBUG_FEATURES: true,\n  backendWeaveExecutionUrl: (shadow: boolean = false) => {\n    if (shadow) {\n      return 'https://example.com/shadow_execute';\n    }\n    return 'https://example.com/execute';\n  },\n});\n\n// Get the updated configuration object\nconst updatedConfig = getConfig();\n```",
  "questions": "1. What is the purpose of the `Config` interface?\n   - The `Config` interface defines the shape of an object that contains various URLs and a boolean flag for enabling debug features.\n2. What is the significance of the `WEAVE_BACKEND_HOST` constant?\n   - The `WEAVE_BACKEND_HOST` constant is used to retrieve the backend host URL from the global `CONFIG` object, falling back to an empty string if it is not defined.\n3. How can the `config` object be modified?\n   - The `setConfig` function can be used to merge a partial `Config` object into the existing `config` object, allowing for modification of the various URLs and debug flag."
}