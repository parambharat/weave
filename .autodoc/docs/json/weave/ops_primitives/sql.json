{
  "fileName": "sql.py",
  "filePath": "weave/ops_primitives/sql.py",
  "url": "https://github.com/wandb/weave/weave/ops_primitives/sql.py",
  "summary": "The `weave` module contains code for working with SQL databases. The `SqlTable` class represents a table in a SQL database and provides methods for querying and manipulating the data in the table. \n\nThe `SqlTable` class has several methods for querying the data in the table. The `count` method returns the number of rows in the table. The `__getitem__` method allows indexing into the table to retrieve a specific row. The `pick` method allows selecting a specific column from the table. The `map` method applies a function to each row in the table and returns a list of the results. The `filter` method applies a filter function to the rows in the table and returns a new `SqlTable` object with the filtered rows. The `groupby` method groups the rows in the table by a specified key and returns a list of groups, where each group is a list of rows.\n\nThe `SqlConnection` class represents a connection to a SQL database. It has a `table` method that returns a `SqlTable` object for a specified table in the database. The `sqlconnection_tables` method returns a dictionary of `SqlTable` objects for all tables in the database.\n\nThe code also includes several utility functions for working with SQL databases, such as `local_sqlconnection` for creating a local connection to a database and `sqlconnection_tables_type` for returning the types of all tables in a database.\n\nOverall, this code provides a convenient and flexible way to work with SQL databases in a Python project. Here is an example of how to use it:\n\n```python\nfrom weave.sql import local_sqlconnection\n\n# create a connection to a local SQLite database\nconn = local_sqlconnection(\"sqlite:///example.db\")\n\n# get a table object for the \"users\" table\nusers_table = conn.table(\"users\")\n\n# count the number of rows in the table\nnum_rows = users_table.count()\n\n# get the first row in the table\nfirst_row = users_table[0]\n\n# get the \"name\" column for all rows in the table\nnames = users_table.pick(\"name\")\n\n# apply a function to each row in the table\ndef add_one(row):\n    return row[\"age\"] + 1\n\nages_plus_one = users_table.map(add_one)\n\n# filter the rows in the table\ndef is_adult(row):\n    return row[\"age\"] >= 18\n\nadult_users = users_table.filter(is_adult)\n\n# group the rows in the table by the \"gender\" column\ndef get_gender(row):\n    return row[\"gender\"]\n\ngender_groups = users_table.groupby(get_gender)\n```",
  "questions": "1. What is the purpose of the `filter_fn_to_sql_filter` function?\n   - The `filter_fn_to_sql_filter` function converts a filter function node from a graph into a SQL filter that can be used to filter rows in a SQL table.\n2. What is the purpose of the `SqlTable` class?\n   - The `SqlTable` class represents a SQL table and provides methods for querying and manipulating the data in the table.\n3. What is the purpose of the `sqlconnection_tables_type` function?\n   - The `sqlconnection_tables_type` function returns a dictionary that maps table names to their corresponding column types, which can be used to generate a schema for the tables."
}