{
  "fileName": "async_demo.py",
  "filePath": "weave/async_demo.py",
  "url": "https://github.com/wandb/weave/weave/async_demo.py",
  "summary": "This code demonstrates how to create asynchronous Weave operations. Weave is a platform for building and deploying machine learning models. The code defines three classes: `AsyncDemoModelType`, `AsyncDemoModel`, and `AsyncDemoTrainResult`. \n\n`AsyncDemoModelType` is a subclass of `weave.types.ObjectType` and defines a property type of `id` as a string. `AsyncDemoModel` is a class that takes an `id` parameter and has an `infer` method that takes a string `x` as input and returns `x + \"-abcd\"`. `AsyncDemoTrainResultType` is another subclass of `weave.types.ObjectType` that also defines a property type of `id` as a string. `AsyncDemoTrainResult` is a class that takes an `id` parameter and has a `model` method that returns an instance of `AsyncDemoModel` with the same `id`.\n\nThe `slowmult` function is an example of an asynchronous Weave operation. It takes three input parameters: `a` and `b` are integers, and `sleep` is a float. It returns a function that takes no input and returns an integer. The function multiplies `a` and `b` together, but does so slowly by sleeping for `sleep` seconds between each iteration of the loop. The `_run` parameter is used to print the current result and set the output of the function.\n\nThe `train` function is another example of an asynchronous Weave operation. It takes a list of dictionaries as input, where each dictionary has a `prompt` key and a `completion` key, both of which are strings. It returns a function that takes no input and returns an instance of `AsyncDemoTrainResult`. The function prints \"starting\", creates an instance of `AsyncDemoTrainResult` with the `id` of the first prompt in the dataset, sets it as the output of the function, and prints \"done\".\n\nThese classes and functions can be used to build and deploy machine learning models on the Weave platform. For example, `AsyncDemoModel` could be used as a component in a larger machine learning model, and `slowmult` and `train` could be used to train and test the model asynchronously.",
  "questions": "1. What is the purpose of the `weave` module being imported?\n- A smart developer might ask what the `weave` module is and what it does. The `weave` module is being used to create asynchronous Weave ops.\n\n2. What is the purpose of the `AsyncDemoModelType` and `AsyncDemoTrainResultType` classes?\n- A smart developer might ask what the `AsyncDemoModelType` and `AsyncDemoTrainResultType` classes are for. These classes are used to define object types that are used as input and output types for the `infer` and `model` operations, respectively.\n\n3. What is the purpose of the `train` function?\n- A smart developer might ask what the `train` function does. The `train` function takes a dataset as input and returns an `AsyncDemoTrainResult` object as output."
}