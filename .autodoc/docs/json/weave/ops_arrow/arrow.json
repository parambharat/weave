{
  "fileName": "arrow.py",
  "filePath": "weave/ops_arrow/arrow.py",
  "url": "https://github.com/wandb/weave/weave/ops_arrow/arrow.py",
  "summary": "This code provides utility functions and classes for handling Apache Arrow data structures in the Weave project. Arrow is a columnar memory format for efficient in-memory analytics, and this code helps convert Arrow data types to Weave types and vice versa.\n\nThe main functions in this code are:\n\n- `arrow_type_to_weave_type`: Converts an Arrow data type to a Weave data type.\n- `arrow_field_to_weave_type`: Converts an Arrow field to a Weave data type.\n- `arrow_schema_to_weave_type`: Converts an Arrow schema to a Weave data type.\n\nThese functions are used to convert Arrow data structures to Weave data structures, which can then be used in the larger project.\n\nThe code also defines two dataclasses, `ArrowArrayType` and `ArrowTableType`, which are subclasses of the `types.Type` class. These classes represent Arrow arrays and tables, respectively, and provide methods for saving and loading instances of these data structures to and from artifacts.\n\nAdditionally, the code provides utility functions for working with Arrow data structures, such as:\n\n- `arrow_as_array`: Converts an Arrow object (Table, ChunkedArray, or DictionaryArray) to an Arrow Array.\n- `offsets_starting_at_zero`: Ensures that the offsets of a ListArray start at zero.\n- `rewrite_weavelist_refs`: Rewrites references in a WeaveList to ensure they are referencable from a target artifact.\n- `pretty_print_arrow_type`: Returns a pretty-printed string representation of an Arrow data type, schema, or field.\n- `union_is_null`, `safe_is_null`, `safe_coalesce`, and `arrow_zip`: Provide utility functions for handling Arrow arrays, including handling Union types correctly.\n\nThese utility functions are used throughout the Weave project to manipulate and work with Arrow data structures efficiently.",
  "questions": "1. **Question**: What is the purpose of the `arrow_type_to_weave_type` function?\n   **Answer**: The `arrow_type_to_weave_type` function is responsible for converting a given PyArrow data type (`pa.DataType`) to its corresponding Weave data type (`types.Type`).\n\n2. **Question**: How does the `ArrowWeaveListType` class handle saving and loading instances?\n   **Answer**: The `ArrowWeaveListType` class saves instances by converting them to a parquet-friendly format and writing them to a parquet file. It loads instances by reading from the parquet file, converting the data back to the original format, and validating the result.\n\n3. **Question**: What is the purpose of the `safe_coalesce` function?\n   **Answer**: The `safe_coalesce` function is a utility function that takes multiple PyArrow arrays as input and returns the first non-null value for each corresponding element in the input arrays. It also handles Union types correctly, unlike the default PyArrow `coalesce` function."
}