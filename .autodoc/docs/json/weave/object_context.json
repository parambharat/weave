{
  "fileName": "object_context.py",
  "filePath": "weave/object_context.py",
  "url": "https://github.com/wandb/weave/weave/object_context.py",
  "summary": "The code in this file defines a transaction manager for the Weave project. The purpose of this manager is to collect mutations made to objects within a context and only write them when the context exits. This can be used with `weave_api.finish()` to batch mutations from user code. The code is experimental for now.\n\nThe file imports several modules and defines two data classes: `MutationRecord` and `ObjectContext`. `MutationRecord` has two attributes: `mutation_name` and `args`. `ObjectContext` has one attribute: `objects`, which is a dictionary that maps object URIs to `ObjectRecord` instances. An `ObjectRecord` has four attributes: `val`, `type`, `branched_from_uri`, and `mutations`. `val` is the object value, `type` is the object type, `branched_from_uri` is the URI of the object that this object was branched from (if any), and `mutations` is a list of `MutationRecord` instances representing the mutations made to this object.\n\nThe `ObjectContext` class defines several methods for adding and looking up objects and mutations. `add_ref` adds a reference to an object to the context. `lookup_ref_val` looks up the value of an object given its URI. `lookup_ref_type` looks up the type of an object given its URI. `add_mutation` adds a mutation to an object given its URI, the URI of the object it was branched from (if any), the new value of the object, a function to create a new type for the object, and the mutation itself. `finish_mutation` finishes a mutation on an object given its URI. `finish_mutations` finishes all mutations in the context.\n\nThe file also defines a context manager `object_context` that creates an `ObjectContext` and sets it as the current context. The context manager yields the context and then finishes all mutations in the context when the context exits. The file also defines a function `get_object_context` that returns the current context.\n\nOverall, this file provides a way to manage mutations to objects in a Weave context. It allows mutations to be collected and batched for more efficient processing.",
  "questions": "1. What is the purpose of this code?\n- This code is a transaction manager that collects mutations made to objects within a context and writes them only when the context exits. It can be used with `weave_api.finish()` to batch mutations from user code.\n\n2. Is this code stable for production use?\n- No, it is experimental for now.\n\n3. What is the purpose of the `object_context()` function and how is it used?\n- The `object_context()` function is a context manager that creates an `ObjectContext` and sets it as the current context. It yields the context so that mutations can be made to objects within the context. When the context exits, the mutations are written and the context is reset. It is used to manage state changes to objects within a transaction."
}