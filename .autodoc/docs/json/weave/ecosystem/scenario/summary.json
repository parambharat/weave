{
  "folderName": "scenario",
  "folderPath": ".autodoc/docs/json/weave/ecosystem/scenario",
  "url": "https://github.com/wandb/weave/.autodoc/docs/json/weave/ecosystem/scenario",
  "files": [
    {
      "fileName": "__init__.py",
      "filePath": "weave/ecosystem/scenario/__init__.py",
      "url": "https://github.com/wandb/weave/weave/ecosystem/scenario/__init__.py",
      "summary": "The `weave` module is being imported and the `typing` module is also being imported. The `ScenarioResult` class is defined as a subclass of `typing.TypedDict`. It has a `scenario_id` attribute of type `str` and six `metric` attributes of type `float`. The `MetricsBankInput` class is also defined as a subclass of `typing.TypedDict`. It has two attributes, `baseline` and `candidate`, both of which are lists of `ScenarioResult` objects. \n\nThe `MetricsBankPanel` class is defined as a subclass of `weave.Panel`. It has an `id` attribute set to `\"MetricsBankPanel\"` and an `input_node` attribute of type `weave.Node[MetricsBankInput]`. The `render` method is decorated with `weave.op()`. It takes no arguments and returns a `weave.panels.Each` object. \n\nInside the `render` method, the `input_node` attribute is cast to type `MetricsBankInput`. The `baseline` and `candidate` attributes of the `MetricsBankInput` object are assigned to `baseline` and `candidate` variables, respectively. The `weave.ops.join_all()` method is called with two arguments: a `weave.ops.make_list()` object and a lambda function. The `make_list()` object takes two lists, `baseline` and `candidate`, and returns a list of dictionaries where each dictionary has keys `\"scenario_id\"`, `\"metric1\"`, `\"metric2\"`, `\"metric3\"`, `\"metric4\"`, `\"metric5\"`, and `\"metric6\"`. The lambda function takes a row from the list of dictionaries and returns the value of the `\"scenario_id\"` key. The `join_all()` method returns a list of dictionaries where each dictionary has keys `\"scenario_id\"`, `\"metric1\"`, `\"metric2\"`, `\"metric3\"`, `\"metric4\"`, `\"metric5\"`, and `\"metric6\"`, and values that are tuples of the corresponding values from the `baseline` and `candidate` lists. \n\nThe `weave.ops.difference()` method is called with two arguments: the keys of the first dictionary in the `joined` list and a list containing the string `\"scenario_id\"`. The `difference()` method returns a list of strings that are the keys of the `joined` dictionaries, except for `\"scenario_id\"`. \n\nFinally, a `weave.panels.Each` object is returned. It takes two arguments: the list of metric names returned by `weave.ops.difference()` and a lambda function that returns a `weave.panels.Group` object. The `Group` object has two keys: `\"title\"`, which is the metric name, and `\"plot\"`, which is a `weave.panels.Plot` object. The `Plot` object takes two arguments: the `joined` list and two lambda functions that return the values of the `\"metric_name\"` key for the baseline and candidate dictionaries, respectively. \n\nOverall, this code defines a `MetricsBankPanel` class that takes two lists of `ScenarioResult` objects and returns a `weave.panels.Each` object that contains a `weave.panels.Group` object for each metric in the `ScenarioResult` objects. Each `Group` object contains a `weave.panels.Plot` object that plots the values of the metric for the baseline and candidate dictionaries.",
      "questions": "1. What is the purpose of the `ScenarioResult` and `MetricsBankInput` classes?\n    \n    `ScenarioResult` is a typed dictionary that defines the structure of a scenario result, including its ID and six metrics. `MetricsBankInput` is another typed dictionary that defines the structure of the input to the `MetricsBankPanel`, which includes a baseline and candidate list of `ScenarioResult` objects.\n\n2. What is the `MetricsBankPanel` class and what does it do?\n    \n    `MetricsBankPanel` is a subclass of `weave.Panel` that takes in a `MetricsBankInput` object and produces a panel with plots for each metric in the input. It first joins the baseline and candidate lists on the scenario ID, then computes the metrics to plot by taking the difference of the joined keys and the scenario ID. Finally, it creates a plot for each metric using the joined data and adds it to the panel.\n\n3. What is the purpose of the `TODO` comments in the `render` method?\n    \n    The first `TODO` comment indicates that there used to be a `title` parameter for the `Plot` object that was removed, and suggests that it should be added back. The second `TODO` comment indicates that there used to be `x_title` and `y_title` parameters for the `Plot` object that were removed, and suggests that they should be added back."
    }
  ],
  "folders": [],
  "summary": "The `scenario` folder contains code for the `MetricsBankPanel` class, which is responsible for rendering a panel that displays and compares metrics from two sets of `ScenarioResult` objects, referred to as `baseline` and `candidate`. This panel is part of the larger `weave` project, which is a framework for creating interactive data visualizations.\n\nThe `MetricsBankPanel` class is a subclass of `weave.Panel` and has an `input_node` attribute of type `weave.Node[MetricsBankInput]`. The `MetricsBankInput` class is a TypedDict with two attributes, `baseline` and `candidate`, both of which are lists of `ScenarioResult` objects. Each `ScenarioResult` object contains a `scenario_id` attribute and six `metric` attributes, all of which are floats.\n\nThe main functionality of the `MetricsBankPanel` class is provided by its `render` method, which is decorated with `weave.op()`. This method takes no arguments and returns a `weave.panels.Each` object. Inside the `render` method, the `input_node` attribute is cast to type `MetricsBankInput`, and the `baseline` and `candidate` attributes are extracted. The `weave.ops.join_all()` method is then called to join the `baseline` and `candidate` lists based on the `scenario_id` attribute.\n\nThe `weave.ops.difference()` method is used to obtain a list of metric names, excluding the `scenario_id`. A `weave.panels.Each` object is then returned, which iterates over the metric names and creates a `weave.panels.Group` object for each metric. Each `Group` object contains a `weave.panels.Plot` object that plots the values of the metric for the baseline and candidate dictionaries.\n\nHere's an example of how this code might be used:\n\n```python\nfrom weave import Weave\nfrom .autodoc.docs.json.weave.ecosystem.scenario import MetricsBankPanel, MetricsBankInput, ScenarioResult\n\n# Create sample ScenarioResult objects\nbaseline_results = [\n    ScenarioResult(scenario_id=\"1\", metric1=10, metric2=20, metric3=30, metric4=40, metric5=50, metric6=60),\n    ScenarioResult(scenario_id=\"2\", metric1=15, metric2=25, metric3=35, metric4=45, metric5=55, metric6=65),\n]\n\ncandidate_results = [\n    ScenarioResult(scenario_id=\"1\", metric1=12, metric2=22, metric3=32, metric4=42, metric5=52, metric6=62),\n    ScenarioResult(scenario_id=\"2\", metric1=18, metric2=28, metric3=38, metric4=48, metric5=58, metric6=68),\n]\n\n# Create MetricsBankInput object\ninput_data = MetricsBankInput(baseline=baseline_results, candidate=candidate_results)\n\n# Create MetricsBankPanel object\nmetrics_panel = MetricsBankPanel(input_node=input_data)\n\n# Render the panel using Weave\nweave = Weave(metrics_panel)\nweave.render()\n```\n\nThis example creates two sets of `ScenarioResult` objects, one for the baseline and one for the candidate. It then creates a `MetricsBankInput` object and passes it to the `MetricsBankPanel` class. Finally, it renders the panel using the `Weave` framework, which will display a comparison of the metrics for each scenario in the baseline and candidate sets.",
  "questions": ""
}