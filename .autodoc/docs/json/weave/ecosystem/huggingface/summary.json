{
  "folderName": "huggingface",
  "folderPath": ".autodoc/docs/json/weave/ecosystem/huggingface",
  "url": "https://github.com/wandb/weave/.autodoc/docs/json/weave/ecosystem/huggingface",
  "files": [
    {
      "fileName": "__init__.py",
      "filePath": "weave/ecosystem/huggingface/__init__.py",
      "url": "https://github.com/wandb/weave/weave/ecosystem/huggingface/__init__.py",
      "summary": "The code above is used to import various modules and classes from the `weave` project. The purpose of this code is to provide a high-level interface for working with Hugging Face models and datasets. \n\nThe first line of code imports the `context_state` module from the `weave` project and assigns it to the variable `_context`. This module is used to manage the state of the current context, which includes things like the current working directory and the current set of loaded modules.\n\nThe next line of code sets a token to indicate that built-in modules should be loaded. This is done using the `_context.set_loading_built_ins()` method. This is necessary because some of the modules being imported rely on built-in modules that may not be loaded by default.\n\nThe next few lines of code import various modules and classes from the `weave` project. These include the `huggingface_datasets` module, the `huggingface_models` module, the `ModelOutputAttention` class, and the `FullTextClassificationPipelineOutput` class. These modules and classes are used to provide a high-level interface for working with Hugging Face models and datasets.\n\nThe `huggingface_datasets` module provides a set of functions for loading and working with Hugging Face datasets. For example, the `load_dataset` function can be used to load a dataset by name:\n\n```python\nfrom weave import load_dataset\n\ndataset = load_dataset('imdb')\n```\n\nThe `huggingface_models` module provides a set of functions for loading and working with Hugging Face models. For example, the `AutoModelForSequenceClassification` function can be used to load a pre-trained model for sequence classification:\n\n```python\nfrom weave import AutoModelForSequenceClassification\n\nmodel = AutoModelForSequenceClassification.from_pretrained('bert-base-uncased')\n```\n\nThe `ModelOutputAttention` class is used to represent the attention output of a Hugging Face model. This can be useful for tasks like visualization and interpretation of model outputs.\n\nThe `FullTextClassificationPipelineOutput` class is used to represent the output of a full text classification pipeline. This includes the predicted label, the confidence score, and the attention output.\n\nFinally, the last line of code clears the token that was set earlier to indicate that built-in modules should be loaded. This is done using the `_context.clear_loading_built_ins()` method.",
      "questions": "1. What is the purpose of the `_loading_builtins_token` variable and how is it used in this code?\n   - The `_loading_builtins_token` variable is used to temporarily set the loading of built-in modules to True. It is used to ensure that the `weave` module can access the necessary built-in modules during execution and is then cleared at the end of the code block.\n   \n2. What is the relationship between the `weave` module and the `huggingface_datasets` and `huggingface_models` modules?\n   - The `weave` module imports the `huggingface_datasets` and `huggingface_models` modules, suggesting that `weave` may use functionality from these modules in its own implementation.\n   \n3. What is the purpose of the `ModelOutputAttention` and `FullTextClassificationPipelineOutput` classes imported from the `hfmodel` and `model_textclassification` modules, respectively?\n   - These classes are likely used in the implementation of `weave` to provide functionality related to model output and text classification. Further investigation of the `weave` module would be necessary to determine their exact usage."
    },
    {
      "fileName": "hfmodel.py",
      "filePath": "weave/ecosystem/huggingface/hfmodel.py",
      "url": "https://github.com/wandb/weave/weave/ecosystem/huggingface/hfmodel.py",
      "summary": "This code defines several classes and types used in the larger Weave project. The purpose of this code is to provide serialization and deserialization methods for various objects used in the project. \n\nThe `HFInternalBaseModelOutputType` and `HFInternalPipelineType` classes define how to serialize and deserialize objects of type `transformers.modeling_outputs.BaseModelOutput` and `transformers.pipelines.base.Pipeline`, respectively. These classes inherit from `weave.types.Type` and define the `save_instance` and `load_instance` methods, which write and read objects to and from a file using the `pickle` module. \n\nThe `HFModelType` class defines the properties of a `HFModel` object, which includes an ID, SHA, pipeline tag, tags, downloads, likes, and library name. This class inherits from `weave.types.ObjectType` and defines the `property_types` method, which returns a dictionary of property names and their corresponding types. \n\nThe `BaseModelOutputType` and `ModelOutputAttentionType` classes define the properties of `BaseModelOutput` and `ModelOutputAttention` objects, respectively. These classes inherit from `weave.types.ObjectType` and define the `property_types` method, which returns a dictionary of property names and their corresponding types. \n\nThe `BaseModelOutput` and `ModelOutputAttention` classes are decorated with `@weave.weave_class`, which specifies the corresponding `weave_type` for each class. These classes define several methods that return various properties of the objects, such as the ID, SHA, pipeline tag, tags, downloads, likes, and library name. \n\nThe `FullPipelineOutputType` class defines the properties of a `FullPipelineOutput` object, which includes an ID, SHA, model input, and model output. This class inherits from `weave.types.ObjectType` and defines the `property_types` method, which returns a dictionary of property names and their corresponding types. \n\nThe `FullPipelineOutput` class is decorated with `@weave.weave_class`, which specifies the corresponding `weave_type`. This class defines a method `attention` that returns a `ModelOutputAttention` object, which includes the `BaseModelOutput` object and a list of attention tensors. \n\nOverall, this code provides serialization and deserialization methods for various objects used in the Weave project. These objects include `transformers.modeling_outputs.BaseModelOutput`, `transformers.pipelines.base.Pipeline`, `HFModel`, `BaseModelOutput`, `ModelOutputAttention`, and `FullPipelineOutput`. These objects are used to represent various components of a machine learning pipeline, such as models, inputs, and outputs. The serialization and deserialization methods provided by this code allow these objects to be saved and loaded from disk, which is useful for caching and sharing models and other pipeline components. \n\nExample usage:\n\n```python\n# create an HFModel object\nmodel = HFModel(\"model_id\", \"model_sha\", \"pipeline_tag\", [\"tag1\", \"tag2\"], 100, 50, \"library_name\")\n\n# create a BaseModelOutput object\nmodel_input = \"input\"\nencoded_input = torch.tensor([1, 2, 3])\nmodel_output = transformers.modeling_outputs.BaseModelOutput(last_hidden_state=torch.tensor([4, 5, 6]))\nbmo = BaseModelOutput(model, model_input, encoded_input, model_output)\n\n# create a FullPipelineOutput object\nfpo = FullPipelineOutput(model, model_input, [{}])\n\n# get the ID of the HFModel object\nmodel_id = model.id()\n```",
      "questions": "1. What is the purpose of the `HFModel` class and how is it used?\n- The `HFModel` class represents a Hugging Face model and is used to define operations that can be performed on the model, such as retrieving metadata and generating a README. It is used as a base class for specific model classes that inherit its properties and operations.\n\n2. What is the purpose of the `BaseModelOutput` and `ModelOutputAttention` classes?\n- The `BaseModelOutput` class represents the output of a Hugging Face model and contains information such as the input, the encoded input, and the model output. The `ModelOutputAttention` class extends `BaseModelOutput` and adds a property for attention scores. These classes are used to define the output of a Hugging Face model and can be used as input to other operations.\n\n3. What is the purpose of the `HFInternalBaseModelOutputType` and `HFInternalPipelineType` classes?\n- The `HFInternalBaseModelOutputType` and `HFInternalPipelineType` classes are used to define how to serialize and deserialize instances of `transformers.modeling_outputs.BaseModelOutput` and `transformers.pipelines.base.Pipeline`, respectively. These classes are used by Weave to store and retrieve instances of these classes from an artifact store."
    },
    {
      "fileName": "huggingface_datasets.py",
      "filePath": "weave/ecosystem/huggingface/huggingface_datasets.py",
      "url": "https://github.com/wandb/weave/weave/ecosystem/huggingface/huggingface_datasets.py",
      "summary": "The `weave` project is a Python library for building and deploying machine learning models. The code in this file provides functionality for working with datasets from the Hugging Face Datasets library. \n\nThe `hf_datasets` function returns a list of dictionaries, where each dictionary contains information about a dataset available in the Hugging Face Datasets library. This information includes the dataset ID, last modified date, tags, and description. This function can be used to retrieve information about available datasets and help users decide which dataset to use for their machine learning task.\n\nThe `hf_feature_type_to_type` function is used to convert Hugging Face Datasets feature types to corresponding Weave types. This function takes a feature type as input and returns the corresponding Weave type. The function handles several types of feature types, including dictionaries, sequences, images, and class labels. This function is used internally by the `dataset` function to convert the feature types of a dataset to corresponding Weave types.\n\nThe `dataset_refine_output_type` function is used to refine the output type of the `dataset` function based on the name of the dataset. This function loads the dataset using the Hugging Face Datasets library and converts the feature types of the dataset to corresponding Weave types using the `hf_feature_type_to_type` function. The output of this function is a `List` of `TypedDict`s, where each `TypedDict` corresponds to a row in the dataset.\n\nThe `dataset` function loads a dataset using the Hugging Face Datasets library and returns the first 100 rows of the dataset as a list of dictionaries. The output type of this function is refined using the `dataset_refine_output_type` function, which ensures that the output type is consistent with the feature types of the dataset. This function can be used to load a dataset and prepare it for use in a machine learning model.\n\nOverall, this code provides a convenient interface for working with datasets from the Hugging Face Datasets library in the Weave project. The `hf_datasets` function can be used to retrieve information about available datasets, while the `dataset` function can be used to load a dataset and prepare it for use in a machine learning model. The `hf_feature_type_to_type` and `dataset_refine_output_type` functions are used internally to ensure that the feature types of the dataset are consistent with the types expected by the Weave library.",
      "questions": "1. What is the purpose of the `hf_datasets` function?\n- The `hf_datasets` function returns a list of dictionaries containing information about datasets available on the Hugging Face Hub.\n\n2. What is the purpose of the `hf_feature_type_to_type` function?\n- The `hf_feature_type_to_type` function maps Hugging Face dataset feature types to Weave types, which are used for type annotations in the code.\n\n3. What is the purpose of the `dataset` function?\n- The `dataset` function loads a dataset by name using the Hugging Face datasets library, refines the output type using the `dataset_refine_output_type` function, and returns the first 100 rows of the dataset as a list of dictionaries."
    },
    {
      "fileName": "huggingface_models.py",
      "filePath": "weave/ecosystem/huggingface/huggingface_models.py",
      "url": "https://github.com/wandb/weave/weave/ecosystem/huggingface/huggingface_models.py",
      "summary": "This code defines several classes and functions related to interacting with Hugging Face models through the Hugging Face Hub API. The `full_model_info_to_hfmodel` function takes a `ModelInfo` object from the API and returns an `HFModel` object from the `hfmodel` module, which is either an `HFModelTextClassification` or `HFModelTextGeneration` object depending on the `pipeline_tag` attribute of the `ModelInfo`. These objects contain metadata about the model, such as its ID, SHA, tags, and download/like counts.\n\nThe `HuggingfaceModelsPanel` class is a subclass of `weave.Panel` that takes a list of `HFModel` objects as input and displays them in a table with columns for the model ID, SHA, pipeline tag, tags, download count, like count, and library name. Clicking on a model ID in the table opens a new page with a `HuggingfaceModelPanel` displaying more detailed information about the model.\n\nThe `HuggingfaceModelPanel` class is another subclass of `weave.Panel` that takes an `HFModel` object as input and displays information about the model in a card format. The card has two tabs: one for the model's README file and one for metadata about the model such as its ID and pipeline tag.\n\nThe `HuggingFacePackage` class defines three methods for interacting with the Hugging Face Hub API: `model_refine_output_type`, `model`, and `models`. The `model_refine_output_type` method takes a model ID as input and returns the appropriate `HFModel` subclass type based on the model's pipeline tag. The `model` method takes a model ID as input and returns the corresponding `HFModel` object. The `models` method returns a list of all available `HFModel` objects.\n\nThe `huggingface` function returns a `HuggingFacePackage` object, which can be used to access the `model` and `models` methods for interacting with the Hugging Face Hub API. The `HuggingfacePackagePanel` class is a subclass of `weave.Panel` that takes a `HuggingFacePackage` object as input and displays a card with a tab for browsing available models.\n\nOverall, this code provides a convenient way to browse and interact with Hugging Face models through the Hugging Face Hub API. It can be used as part of a larger project for working with natural language processing models. For example, it could be integrated into a web application for generating text using pre-trained models. Here is an example of how to use this code to get a list of available models:\n\n```\nhf = huggingface()\nmodels = hf.models()\nfor model in models:\n    print(model.id())\n```",
      "questions": "1. What is the purpose of the `full_model_info_to_hfmodel` function?\n   \n   The `full_model_info_to_hfmodel` function takes in a `ModelInfo` object from the Hugging Face API and returns an instance of `HFModel` or one of its subclasses (`HFModelTextClassification` or `HFModelTextGeneration`) depending on the `pipeline_tag` attribute of the `ModelInfo` object.\n\n2. What is the purpose of the `HuggingfaceModelsPanel` class?\n   \n   The `HuggingfaceModelsPanel` class is a subclass of `weave.Panel` that defines a panel for displaying a table of `HFModel` objects. The table has columns for the model ID, SHA, pipeline tag, tags, downloads, likes, and library name. Each row in the table is a `WeaveLink` that links to a `HuggingfaceModelPanel` for the corresponding `HFModel` object.\n\n3. What is the purpose of the `HuggingFacePackage` class?\n   \n   The `HuggingFacePackage` class defines a package of operations for interacting with the Hugging Face API. It has operations for retrieving a single `HFModel` object (`model`), retrieving a list of all available `HFModel` objects (`models`), and refining the output type of the `model` operation based on the `pipeline_tag` attribute of the requested model."
    },
    {
      "fileName": "model_textclassification.py",
      "filePath": "weave/ecosystem/huggingface/model_textclassification.py",
      "url": "https://github.com/wandb/weave/weave/ecosystem/huggingface/model_textclassification.py",
      "summary": "This code defines several classes and types related to text classification using Hugging Face models. The main purpose of this code is to provide a pipeline for text classification using pre-trained Hugging Face models and to display the results in a user-friendly way.\n\nThe `HFModelTextClassificationType` class is a type that extends `hfmodel.HFModelType` and is used to represent a Hugging Face model for text classification. The `FullTextClassificationPipelineOutputType` class is a type that extends `hfmodel.FullPipelineOutputType` and is used to represent the output of the text classification pipeline. It has three properties: `_model`, which is of type `HFModelTextClassificationType` and represents the Hugging Face model used in the pipeline, `model_input`, which is a string representing the input text, and `model_output`, which is a list of dictionaries representing the classification results. Each dictionary has two keys: `score`, which is a float representing the confidence score of the classification, and `label`, which is a string representing the label of the classification.\n\nThe `ClassificationResultType` class is a type that extends `weave.types.ObjectType` and is used to represent a single classification result. It has four properties: `_model_name`, which is a string representing the name of the Hugging Face model used for the classification, `model_input`, which is a string representing the input text, `_score`, which is a float representing the confidence score of the classification, and `_label`, which is a string representing the label of the classification.\n\nThe `ClassificationResult` class is a dataclass that represents a single classification result. It has the same properties as `ClassificationResultType` and is decorated with `weave.weave_class` to indicate that it should be used as a Weave class. It also has three methods: `model_name()`, which returns the `_model_name` property, `score()`, which returns the `_score` property, and `label()`, which returns the `_label` property.\n\nThe `ClassificationResultPanel` class is a Weave panel that displays a table of classification results. It has one input node of type `list[ClassificationResult]` and uses the `Table` panel to display the results. The table has four columns: `model_name()`, which displays the name of the Hugging Face model used for the classification and is a link to the model page, `model_input`, which displays the input text, `score()`, which displays the confidence score of the classification, and `label()`, which displays the label of the classification.\n\nThe `FullTextClassificationPipelineOutput` class is a dataclass that represents the output of the text classification pipeline. It has the same properties as `FullTextClassificationPipelineOutputType` and is decorated with `weave.weave_class` to indicate that it should be used as a Weave class. It also has two methods: `model_name()`, which returns the name of the Hugging Face model used for the classification, and `call()`, which takes an input string and returns a `FullTextClassificationPipelineOutput` object representing the classification results.\n\nThe `FullTextClassificationResultPanel` class is a Weave panel that displays the output of the text classification pipeline. It has one input node of type `FullTextClassificationPipelineOutput` and uses the `Group` panel to display the results. The `Group` panel has two items: `input`, which displays the input text, and `output`, which displays the classification results as a plot.\n\nThe `HFModelTextClassification` class is a dataclass that represents a Hugging Face model for text classification. It is decorated with `weave.weave_class` to indicate that it should be used as a Weave class. It has two methods: `pipeline()`, which returns a Hugging Face pipeline for the model, and `call()`, which takes an input string and returns a `FullTextClassificationPipelineOutput` object representing the classification results. It also has a `call_list()` method that takes a list of input strings and returns a list of `FullTextClassificationPipelineOutput` objects representing the classification results.\n\nThe `apply_models()` function takes a list of `HFModelTextClassification` objects and a list of input strings and returns a list of `ClassificationResult` objects representing the classification results for all models and inputs. It does this by calling the `call_list()` method of each model for all inputs and creating a `ClassificationResult` object for each classification result.\n\nOverall, this code provides a complete pipeline for text classification using pre-trained Hugging Face models and allows the results to be displayed in a user-friendly way. It can be used as a module in a larger project that requires text classification functionality.",
      "questions": "1. What is the purpose of the `weave` module and how does it relate to this code?\n- A smart developer might ask what the `weave` module is and how it relates to this code. \n- `weave` is a module that provides a framework for building and connecting data processing pipelines. It is used extensively throughout this code to define types, classes, and operations.\n\n2. What is the purpose of the `HFModelTextClassification` class and how does it work?\n- A smart developer might ask what the `HFModelTextClassification` class is and how it works. \n- `HFModelTextClassification` is a subclass of `HFModel` that defines a pipeline for text classification using the Hugging Face Transformers library. It provides methods for calling the pipeline on input text and returning the output as a `FullTextClassificationPipelineOutput` object.\n\n3. What is the purpose of the `ClassificationResult` class and how is it used?\n- A smart developer might ask what the `ClassificationResult` class is and how it is used. \n- `ClassificationResult` is a dataclass that represents the output of a text classification model on a single input. It is used in the `apply_models` function to aggregate the results of multiple models on multiple inputs into a single list of `ClassificationResult` objects."
    },
    {
      "fileName": "model_textgeneration.py",
      "filePath": "weave/ecosystem/huggingface/model_textgeneration.py",
      "url": "https://github.com/wandb/weave/weave/ecosystem/huggingface/model_textgeneration.py",
      "summary": "This code defines classes and functions for text generation using the Hugging Face Transformers library within the larger Weave project. \n\nThe `HFModelTextGenerationType` class is a subclass of `hfmodel.HFModelType` and is used to define the type of the Hugging Face model used for text generation. \n\nThe `FullTextGenerationPipelineOutputType` class is a subclass of `hfmodel.FullPipelineOutputType` and defines the output type of the text generation pipeline. It has three properties: `_model`, which is an instance of `HFModelTextGenerationType`; `model_input`, which is a string representing the input to the text generation pipeline; and `model_output`, which is a list of `TextGenerationPipelineOutput` objects. \n\nThe `TextGenerationPipelineOutput` class is a subclass of `typing.TypedDict` and defines the output of a single text generation operation. It has one property: `generated_text`, which is a string representing the generated text. \n\nThe `FullTextGenerationPipelineOutput` class is a dataclass that represents the full output of the text generation pipeline. It has three properties: `_model`, which is an instance of `HFModelTextGeneration`; `model_input`, which is a string representing the input to the text generation pipeline; and `model_output`, which is a list of `TextGenerationPipelineOutput` objects. This class is decorated with `weave.weave_class` to indicate that it is a Weave class and is of type `FullTextGenerationPipelineOutputType`. \n\nThe `FullTextGenerationPanel` class is a subclass of `weave.Panel` and defines a Weave panel for displaying the input and output of the text generation pipeline. It has two properties: `id`, which is a string representing the ID of the panel; and `input_node`, which is a `weave.Node` representing the input to the panel. It has one method, `render()`, which returns a `weave.panels.Group` containing the input and output of the text generation pipeline. This class is decorated with `weave.type()` to indicate that it is a Weave type. \n\nThe `HFModelTextGeneration` class is a dataclass that represents the Hugging Face model used for text generation. It is a subclass of `hfmodel.HFModel` and is decorated with `weave.weave_class` to indicate that it is a Weave class and is of type `HFModelTextGenerationType`. It has two methods: `pipeline()`, which returns a Hugging Face text generation pipeline; and `call()`, which takes a string input and returns a `FullTextGenerationPipelineOutput` object representing the output of the text generation pipeline. It also has a `call_list()` method, which takes a list of string inputs and returns a list of `FullTextGenerationPipelineOutput` objects representing the output of the text generation pipeline for each input. \n\nOverall, this code defines the types and classes necessary for text generation using Hugging Face Transformers within the Weave project. It provides a way to generate text using a Hugging Face model and display the input and output of the text generation pipeline in a Weave panel.",
      "questions": "1. What is the purpose of the `weave` module and how does it relate to this code?\n- A smart developer might ask what the `weave` module is and how it relates to this code. `weave` appears to be a custom module or library that provides some additional functionality for defining and working with data classes and pipelines. It is imported at the beginning of the file and used throughout the code.\n\n2. What is the purpose of the `HFModelTextGeneration` class and how is it used?\n- A smart developer might ask what the `HFModelTextGeneration` class is and how it is used. It appears to be a subclass of `hfmodel.HFModel` that defines two methods: `pipeline()` and `call()`. The `pipeline()` method returns a `transformers.pipelines.Pipeline` object, while the `call()` method takes a string input and returns a `FullTextGenerationPipelineOutput` object. This class is also decorated with `@weave.weave_class(weave_type=HFModelTextGenerationType)` which suggests that it is being used in conjunction with the `weave` module.\n\n3. What is the purpose of the `FullTextGenerationPanel` class and how is it used?\n- A smart developer might ask what the `FullTextGenerationPanel` class is and how it is used. It appears to be a subclass of `weave.Panel` that defines a `render()` method. The `render()` method takes a `FullTextGenerationPipelineOutput` object as input and returns a `weave.panels.Group` object that contains labeled items for the input and output. This class is also decorated with `@weave.type()` which suggests that it is being used in conjunction with the `weave` module."
    }
  ],
  "folders": [],
  "summary": "The code in the `huggingface` folder of the Weave project provides a high-level interface for working with Hugging Face models and datasets. It includes several modules and classes that enable users to load and interact with Hugging Face models, datasets, and pipelines, as well as visualize and interpret model outputs.\n\nFor example, the `huggingface_datasets` module provides functions for loading and working with Hugging Face datasets, such as `load_dataset`. The `huggingface_models` module offers functions for loading and working with Hugging Face models, like `AutoModelForSequenceClassification`. The `ModelOutputAttention` class represents the attention output of a Hugging Face model, which can be useful for visualization and interpretation tasks.\n\nThe `hfmodel` module provides serialization and deserialization methods for various objects used in the Weave project, such as `transformers.modeling_outputs.BaseModelOutput` and `transformers.pipelines.base.Pipeline`. These objects represent components of a machine learning pipeline, and the serialization and deserialization methods allow them to be saved and loaded from disk, which is useful for caching and sharing models and other pipeline components.\n\nThe `model_textclassification` and `model_textgeneration` modules define classes and functions for text classification and text generation using Hugging Face models. They provide pipelines for these tasks and display the results in a user-friendly way. For instance, the `HFModelTextClassification` class represents a Hugging Face model for text classification and provides a pipeline for this task.\n\nHere's an example of how to use this code to load a dataset, a pre-trained model, and perform text classification:\n\n```python\nfrom weave import load_dataset, AutoModelForSequenceClassification, HFModelTextClassification\n\n# Load a dataset\ndataset = load_dataset('imdb')\n\n# Load a pre-trained model\nmodel = AutoModelForSequenceClassification.from_pretrained('bert-base-uncased')\n\n# Create an HFModelTextClassification object\nhf_model = HFModelTextClassification(\"model_id\", \"model_sha\", \"pipeline_tag\", [\"tag1\", \"tag2\"], 100, 50, \"library_name\")\n\n# Perform text classification\ninput_text = \"This movie was amazing!\"\nclassification_output = hf_model.call(input_text)\n```\n\nIn summary, the code in the `huggingface` folder provides a comprehensive interface for working with Hugging Face models and datasets within the Weave project. It enables users to load, interact with, and visualize Hugging Face models and pipelines, as well as perform tasks like text classification and text generation.",
  "questions": ""
}