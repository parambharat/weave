{
  "fileName": "model.py",
  "filePath": "weave/ecosystem/pytorch/model.py",
  "url": "https://github.com/wandb/weave/weave/ecosystem/pytorch/model.py",
  "summary": "The code defines two custom types, `TorchTensorType` and `TorchModelType`, which are used to save and load instances of `torch.Tensor` and `torch.nn.Sequential` objects, respectively. These types inherit from `weave.types.Type`, which is a base class for defining custom types that can be used with the `weave.Artifact` class.\n\nThe `TorchTensorType` class defines two class variables, `instance_classes` and `instance_class`, which specify the types of objects that this type can handle. In this case, both variables are set to `torch.Tensor`. The class also defines two methods, `save_instance` and `load_instance`, which are used to save and load instances of `torch.Tensor` objects to and from an artifact, respectively. The `save_instance` method takes an object, an artifact, and a name as arguments, and saves the object to a file with the given name in the artifact. The `load_instance` method takes an artifact, a name, and an optional `extra` argument, and loads the object with the given name from the artifact.\n\nThe `TorchModelType` class is similar to `TorchTensorType`, but it handles instances of `torch.nn.Sequential` objects instead of `torch.Tensor` objects. It defines the same class variables and methods as `TorchTensorType`, but with `torch.nn.Sequential` substituted for `torch.Tensor`.\n\nThese custom types can be used with the `weave.Artifact` class to save and load `torch.Tensor` and `torch.nn.Sequential` objects to and from an artifact. For example, to save a `torch.Tensor` object to an artifact, you could do the following:\n\n```\nimport weave\nimport torch\n\nartifact = weave.Artifact(\"my_artifact\")\ntensor = torch.tensor([1, 2, 3])\nartifact.save(tensor, \"my_tensor\", type=TorchTensorType())\n```\n\nThis would save the `tensor` object to a file named `my_tensor.pt` in the artifact, using the `TorchTensorType` type. To load the object back from the artifact, you could do the following:\n\n```\nimport weave\nimport torch\n\nartifact = weave.Artifact(\"my_artifact\")\ntensor = artifact.load(\"my_tensor\", type=TorchTensorType())\n```\n\nThis would load the `tensor` object from the artifact, using the `TorchTensorType` type. Similarly, you could save and load `torch.nn.Sequential` objects using the `TorchModelType` type.",
  "questions": "1. What is the purpose of the `TorchTensorType` and `TorchModelType` classes?\n- The `TorchTensorType` and `TorchModelType` classes are custom types defined for the `weave` project that allow for saving and loading instances of `torch.Tensor` and `torch.nn.Sequential` objects, respectively.\n\n2. What is the `weave.types.Type` class and how is it used in this code?\n- The `weave.types.Type` class is a base class for defining custom types in the `weave` project. In this code, it is subclassed by `TorchTensorType` and `TorchModelType` to define custom types for saving and loading `torch.Tensor` and `torch.nn.Sequential` objects.\n\n3. What is the purpose of the `save_instance` and `load_instance` methods in the `TorchTensorType` and `TorchModelType` classes?\n- The `save_instance` method is used to save an instance of a `torch.Tensor` or `torch.nn.Sequential` object to a file in the artifact. The `load_instance` method is used to load an instance of a `torch.Tensor` or `torch.nn.Sequential` object from a file in the artifact."
}