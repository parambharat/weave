{
  "folderName": "keras",
  "folderPath": ".autodoc/docs/json/weave/ecosystem/keras",
  "url": "https://github.com/wandb/weave/.autodoc/docs/json/weave/ecosystem/keras",
  "files": [
    {
      "fileName": "__init__.py",
      "filePath": "weave/ecosystem/keras/__init__.py",
      "url": "https://github.com/wandb/weave/weave/ecosystem/keras/__init__.py",
      "summary": "The code above is used to import modules from the `weave` project. It starts by importing the `context_state` module from the `weave` package and assigning it to the `_context` variable. \n\nNext, it sets a token called `_loading_builtins_token` to the value returned by the `_context.set_loading_built_ins()` method. This method is used to temporarily disable the loading of built-in modules during the import process. \n\nAfter that, the code imports all the modules from the `model` module in the current package using the relative import syntax (`from .model import *`). This means that all the classes, functions, and variables defined in the `model` module will be available in the current module.\n\nFinally, the code clears the loading of built-in modules by calling the `_context.clear_loading_built_ins()` method with the `_loading_builtins_token` as an argument. This restores the default behavior of loading built-in modules during the import process.\n\nThis code is likely used in the larger `weave` project to import the necessary modules and classes from the `model` module. It ensures that built-in modules are not loaded during the import process, which can help prevent naming conflicts and improve performance. \n\nHere is an example of how this code might be used in a larger project:\n\n```python\nfrom weave import model\n\n# Use the classes and functions defined in the model module\nmy_model = model.MyModel()\nresult = model.do_something(my_model)\n\n# Other code that uses the weave package\n``` \n\nOverall, this code is an important part of the `weave` project and helps ensure that the necessary modules are imported correctly.",
      "questions": "1. What is the purpose of the `weave` module and what does it do?\n   - The code imports the `context_state` module from the `weave` package and sets a loading built-ins token. It then imports the `model` module from the current package and clears the loading built-ins token. A smart developer might want to know more about the overall functionality of the `weave` module and how it relates to the `model` module.\n\n2. What is the significance of the `loading built-ins` token and why is it being set and cleared?\n   - The `loading built-ins` token is used to temporarily disable the loading of built-in modules during import. In this code, it is being set before importing the `model` module to prevent any built-in modules from being loaded during the import process. It is then cleared after the import to restore the default behavior.\n\n3. Are there any potential issues with importing all symbols from the `model` module using `from .model import *`?\n   - A smart developer might question the use of a wildcard import (`*`) and whether it could lead to naming conflicts or make it harder to track where certain symbols are coming from. They might suggest using explicit imports instead to improve code readability and maintainability."
    },
    {
      "fileName": "model.py",
      "filePath": "weave/ecosystem/keras/model.py",
      "url": "https://github.com/wandb/weave/weave/ecosystem/keras/model.py",
      "summary": "This file defines the `KerasModel` class for the `weave` project, which allows users to save and publish Keras models. The class handles serializations and extracting the type definition for the model's input and output tensors. \n\nThe `KerasModel` class is a subclass of `weave.types.Type` and has two data members: `inputs_type` and `outputs_type`. These members are of type `weave.types.Type` and represent the input and output tensors of the model, respectively. The `inputs_type` and `outputs_type` members are initialized to `weave.types.Any()`, which means that they can be any type. \n\nThe `KerasModel` class has a `type_of_instance` method that returns the type of a given instance of the class. The method takes an instance of the `KerasModel` class as an argument and returns a `KerasModel` object with the `inputs_type` and `outputs_type` members set to the types of the input and output tensors of the model, respectively. \n\nThe `KerasModel` class also has `save_instance` and `load_instance` methods that save and load instances of the class, respectively. The `save_instance` method takes an instance of the `KerasModel` class, an artifact, and a name as arguments, and saves the instance to the artifact with the given name. The `load_instance` method takes an artifact, a name, and an optional extra argument as arguments, and loads the instance of the `KerasModel` class with the given name from the artifact. \n\nThe file also defines the `call_string` and `call_string_to_number` functions, which are used to call the Keras model with a string input. The `call_string` function takes a `model` and an `input` as arguments, and returns the output of the model when given the input. The `call_string_to_number` function is a helper function for `call_string` that converts the output of the model to an integer. \n\nThe file also defines the `KerasTensorType` class, which is a subclass of `weave.types.Type` and represents a Keras tensor. The `KerasTensorType` class has three data members: `shape`, `data_type`, and `weave_vector_type`. The `shape` member is a `weave.types.Type` object that represents the shape of the tensor. The `data_type` member is a `weave.types.Type` object that represents the data type of the tensor. The `weave_vector_type` member is a `weave.types.Type` object that represents the vector type of the tensor. \n\nThe file also defines the `byte_vector_to_string` function, which is a helper function for `call_string` that converts a byte vector to a string. \n\nOverall, this file provides the necessary functionality for saving and publishing Keras models in the `weave` project, as well as calling the models with string inputs.",
      "questions": "1. What is the purpose of the `KerasModel` class and how is it used?\n- The `KerasModel` class is used to define the input and output types of a Keras model, and to handle serialization and extraction of the type definition. It is used as an argument to the `call_string` function, which takes a string input and returns a vector output.\n\n2. What is the purpose of the `call_string` function and what are its limitations?\n- The `call_string` function takes a `KerasModel` object and a string input, and returns a vector output. Its limitations include hard-coded batching, input type, and single output and input layer, as well as unsized vectors.\n\n3. What is the purpose of the `byte_vector_to_string` function and when is it used?\n- The `byte_vector_to_string` function is used to convert byte vectors to strings, and is used in the `call_string` function to handle the special case of string inputs and outputs."
    }
  ],
  "folders": [],
  "summary": "The `weave` project's `.autodoc/docs/json/weave/ecosystem/keras` folder contains code for handling Keras models, specifically for saving, publishing, and calling them with string inputs. The folder consists of two main files: `__init__.py` and `model.py`.\n\n`__init__.py` is responsible for importing the necessary modules from the `weave` project. It imports the `context_state` module and temporarily disables the loading of built-in modules during the import process using the `_context.set_loading_built_ins()` method. This helps prevent naming conflicts and improve performance. After importing the modules from the `model` module, it restores the default behavior of loading built-in modules.\n\n`model.py` defines the `KerasModel` class, which is a subclass of `weave.types.Type`. It has two data members, `inputs_type` and `outputs_type`, representing the input and output tensors of the model. The class provides methods for handling the serialization and extraction of type definitions for the model's input and output tensors. The `type_of_instance` method returns the type of a given instance of the class, while the `save_instance` and `load_instance` methods save and load instances of the class, respectively.\n\nAdditionally, the file defines the `call_string` and `call_string_to_number` functions for calling the Keras model with a string input. The `KerasTensorType` class, a subclass of `weave.types.Type`, represents a Keras tensor and has three data members: `shape`, `data_type`, and `weave_vector_type`.\n\nHere's an example of how this code might be used in a larger project:\n\n```python\nfrom weave import model\n\n# Create a KerasModel instance\nmy_model = model.KerasModel()\n\n# Save the model instance to an artifact\nmy_model.save_instance(instance=my_model, artifact=my_artifact, name=\"my_model\")\n\n# Load the model instance from the artifact\nloaded_model = model.KerasModel.load_instance(artifact=my_artifact, name=\"my_model\")\n\n# Call the model with a string input\noutput = model.call_string(model=loaded_model, input=\"example input\")\n```\n\nIn summary, the code in this folder is essential for handling Keras models within the `weave` project. It provides functionality for saving, publishing, and calling Keras models with string inputs, as well as handling the serialization and extraction of type definitions for the model's input and output tensors.",
  "questions": ""
}