{
  "fileName": "ini.ec5df2eb.js.map",
  "filePath": "weave/frontend/assets/ini.ec5df2eb.js.map",
  "url": "https://github.com/wandb/weave/weave/frontend/assets/ini.ec5df2eb.js.map",
  "summary": "The code in this file defines the syntax highlighting rules for the INI file format in the Monaco Editor. The INI file format is a simple configuration file format that consists of sections, each containing key-value pairs. \n\nThe `conf` object defines the syntax rules for the INI file format. It specifies that comments in INI files start with the `#` character, and that the file can contain brackets (`{}`, `[]`, and `()`), which are used to group sections and keys. It also defines the auto-closing pairs and surrounding pairs for these brackets.\n\nThe `language` object defines the syntax highlighting rules for the INI file format. It specifies that the default token is an empty string, and that the token postfix for INI files is `.ini`. It defines the regular expressions for escapes, which are used to represent special characters in strings. \n\nThe `tokenizer` object defines the main tokenizer for the INI file format. It specifies that the root tokenizer should match sections, keys, whitespace, numbers, and strings. Sections are matched by a regular expression that starts with a `[` character and ends with a `]` character. Keys are matched by a regular expression that starts with one or more word characters, followed by optional whitespace and an equals sign. Whitespace is matched by a regular expression that matches one or more spaces, tabs, newlines, or carriage returns. Numbers are matched by a regular expression that matches one or more digits. Strings are matched by a regular expression that matches double-quoted or single-quoted strings, and includes support for escape sequences.\n\nThe `whitespace` object defines the whitespace tokenizer, which matches whitespace and comments. Whitespace is matched by a regular expression that matches one or more spaces, tabs, newlines, or carriage returns. Comments are matched by a regular expression that starts with a `#` or `;` character and continues until the end of the line.\n\nThe `string` object defines the string tokenizer, which matches strings and escape sequences. Strings are matched by a regular expression that matches non-escaped characters, escape sequences, and invalid strings. Escape sequences are matched by a regular expression that matches backslashes followed by a character that represents a special character. Invalid strings are matched by regular expressions that match strings that are not properly terminated.\n\nOverall, this code defines the syntax highlighting rules for the INI file format in the Monaco Editor. It can be used to provide syntax highlighting for INI files in the editor, making it easier for users to read and edit these files. Here is an example of how to use this code to provide syntax highlighting for an INI file in the Monaco Editor:\n\n```javascript\nmonaco.languages.register({ id: 'ini' });\n\nmonaco.languages.setMonarchTokensProvider('ini', {\n  tokenizer: {\n    root: [\n      [/^\\\\[[^\\\\]]*\\\\]/, 'metatag'],\n      [/(^\\\\w+)(\\\\s*)(\\\\=)/, ['key', '', 'delimiter']],\n      { include: '@whitespace' },\n      [/\\\\d+/, 'number'],\n      [/\\\"([^\\\"\\\\\\\\]|\\\\\\\\.)*$/, 'string.invalid'],\n      [/'([^'\\\\\\\\]|\\\\\\\\.)*$/, 'string.invalid'],\n      [/\\\"/, 'string', '@string.\\\"'],\n      [/'/, 'string', \\\"@string.'\\\"]\n    ],\n    whitespace: [\n      [/[ \\\\t\\\\r\\\\n]+/, ''],\n      [/^\\\\s*[#;].*$/, 'comment']\n    ],\n    string: [\n      [/[^\\\\\\\\\\\"']+/, 'string'],\n      [/@escapes/, 'string.escape'],\n      [/\\\\\\\\./, 'string.escape.invalid'],\n      [\n        /[\\\"']/,\n        {\n          cases: {\n            '$#==$S2': { token: 'string', next: '@pop' },\n            '@default': 'string'\n          }\n        }\n      ]\n    ]\n  }\n});\n```",
  "questions": "1. What is the purpose of this code file?\n- This code file exports an object containing configuration and language information for the INI file format.\n\n2. What are the different types of tokens that can be generated by the tokenizer?\n- The tokenizer can generate tokens for metatags, keys, delimiters, whitespace, numbers, and strings.\n\n3. What is the purpose of the `surroundingPairs` property in the configuration object?\n- The `surroundingPairs` property specifies pairs of characters that can be used to surround text and will be automatically closed by the editor."
}